// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/flomesh-io/fsm/pkg/webhook/types (interfaces: Register)

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/admissionregistration/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	admission "sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// MockRegister is a mock of Register interface.
type MockRegister struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterMockRecorder
}

// MockRegisterMockRecorder is the mock recorder for MockRegister.
type MockRegisterMockRecorder struct {
	mock *MockRegister
}

// NewMockRegister creates a new mock instance.
func NewMockRegister(ctrl *gomock.Controller) *MockRegister {
	mock := &MockRegister{ctrl: ctrl}
	mock.recorder = &MockRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegister) EXPECT() *MockRegisterMockRecorder {
	return m.recorder
}

// Default mocks base method.
func (m *MockRegister) Default(arg0 context.Context, arg1 runtime.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Default", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Default indicates an expected call of Default.
func (mr *MockRegisterMockRecorder) Default(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Default", reflect.TypeOf((*MockRegister)(nil).Default), arg0, arg1)
}

// GetCategory mocks base method.
func (m *MockRegister) GetCategory() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockRegisterMockRecorder) GetCategory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockRegister)(nil).GetCategory))
}

// GetWebhookConfigurations mocks base method.
func (m *MockRegister) GetWebhookConfigurations() ([]v1.MutatingWebhook, []v1.ValidatingWebhook) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookConfigurations")
	ret0, _ := ret[0].([]v1.MutatingWebhook)
	ret1, _ := ret[1].([]v1.ValidatingWebhook)
	return ret0, ret1
}

// GetWebhookConfigurations indicates an expected call of GetWebhookConfigurations.
func (mr *MockRegisterMockRecorder) GetWebhookConfigurations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookConfigurations", reflect.TypeOf((*MockRegister)(nil).GetWebhookConfigurations))
}

// ValidateCreate mocks base method.
func (m *MockRegister) ValidateCreate(arg0 context.Context, arg1 runtime.Object) (admission.Warnings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCreate", arg0, arg1)
	ret0, _ := ret[0].(admission.Warnings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCreate indicates an expected call of ValidateCreate.
func (mr *MockRegisterMockRecorder) ValidateCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCreate", reflect.TypeOf((*MockRegister)(nil).ValidateCreate), arg0, arg1)
}

// ValidateDelete mocks base method.
func (m *MockRegister) ValidateDelete(arg0 context.Context, arg1 runtime.Object) (admission.Warnings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDelete", arg0, arg1)
	ret0, _ := ret[0].(admission.Warnings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateDelete indicates an expected call of ValidateDelete.
func (mr *MockRegisterMockRecorder) ValidateDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDelete", reflect.TypeOf((*MockRegister)(nil).ValidateDelete), arg0, arg1)
}

// ValidateUpdate mocks base method.
func (m *MockRegister) ValidateUpdate(arg0 context.Context, arg1, arg2 runtime.Object) (admission.Warnings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(admission.Warnings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUpdate indicates an expected call of ValidateUpdate.
func (mr *MockRegisterMockRecorder) ValidateUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUpdate", reflect.TypeOf((*MockRegister)(nil).ValidateUpdate), arg0, arg1, arg2)
}
