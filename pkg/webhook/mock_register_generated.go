// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/flomesh-io/fsm/pkg/webhook (interfaces: Register)

// Package webhook is a generated GoMock package.
package webhook

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/admissionregistration/v1"
)

// MockRegister is a mock of Register interface.
type MockRegister struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterMockRecorder
}

// MockRegisterMockRecorder is the mock recorder for MockRegister.
type MockRegisterMockRecorder struct {
	mock *MockRegister
}

// NewMockRegister creates a new mock instance.
func NewMockRegister(ctrl *gomock.Controller) *MockRegister {
	mock := &MockRegister{ctrl: ctrl}
	mock.recorder = &MockRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegister) EXPECT() *MockRegisterMockRecorder {
	return m.recorder
}

// GetHandlers mocks base method.
func (m *MockRegister) GetHandlers() map[string]http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHandlers")
	ret0, _ := ret[0].(map[string]http.Handler)
	return ret0
}

// GetHandlers indicates an expected call of GetHandlers.
func (mr *MockRegisterMockRecorder) GetHandlers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHandlers", reflect.TypeOf((*MockRegister)(nil).GetHandlers))
}

// GetWebhooks mocks base method.
func (m *MockRegister) GetWebhooks() ([]v1.MutatingWebhook, []v1.ValidatingWebhook) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhooks")
	ret0, _ := ret[0].([]v1.MutatingWebhook)
	ret1, _ := ret[1].([]v1.ValidatingWebhook)
	return ret0, ret1
}

// GetWebhooks indicates an expected call of GetWebhooks.
func (mr *MockRegisterMockRecorder) GetWebhooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhooks", reflect.TypeOf((*MockRegister)(nil).GetWebhooks))
}
