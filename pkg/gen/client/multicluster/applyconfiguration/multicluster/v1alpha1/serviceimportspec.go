/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	multiclusterv1alpha1 "github.com/flomesh-io/fsm/pkg/apis/multicluster/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// ServiceImportSpecApplyConfiguration represents an declarative configuration of the ServiceImportSpec type for use
// with apply.
type ServiceImportSpecApplyConfiguration struct {
	Ports                 []ServicePortApplyConfiguration         `json:"ports,omitempty"`
	IPs                   []string                                `json:"ips,omitempty"`
	Type                  *multiclusterv1alpha1.ServiceImportType `json:"type,omitempty"`
	SessionAffinity       *v1.ServiceAffinity                     `json:"sessionAffinity,omitempty"`
	SessionAffinityConfig *v1.SessionAffinityConfig               `json:"sessionAffinityConfig,omitempty"`
	ServiceAccountName    *string                                 `json:"serviceAccountName,omitempty"`
}

// ServiceImportSpecApplyConfiguration constructs an declarative configuration of the ServiceImportSpec type for use with
// apply.
func ServiceImportSpec() *ServiceImportSpecApplyConfiguration {
	return &ServiceImportSpecApplyConfiguration{}
}

// WithPorts adds the given value to the Ports field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Ports field.
func (b *ServiceImportSpecApplyConfiguration) WithPorts(values ...*ServicePortApplyConfiguration) *ServiceImportSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPorts")
		}
		b.Ports = append(b.Ports, *values[i])
	}
	return b
}

// WithIPs adds the given value to the IPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPs field.
func (b *ServiceImportSpecApplyConfiguration) WithIPs(values ...string) *ServiceImportSpecApplyConfiguration {
	for i := range values {
		b.IPs = append(b.IPs, values[i])
	}
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ServiceImportSpecApplyConfiguration) WithType(value multiclusterv1alpha1.ServiceImportType) *ServiceImportSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithSessionAffinity sets the SessionAffinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SessionAffinity field is set to the value of the last call.
func (b *ServiceImportSpecApplyConfiguration) WithSessionAffinity(value v1.ServiceAffinity) *ServiceImportSpecApplyConfiguration {
	b.SessionAffinity = &value
	return b
}

// WithSessionAffinityConfig sets the SessionAffinityConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SessionAffinityConfig field is set to the value of the last call.
func (b *ServiceImportSpecApplyConfiguration) WithSessionAffinityConfig(value v1.SessionAffinityConfig) *ServiceImportSpecApplyConfiguration {
	b.SessionAffinityConfig = &value
	return b
}

// WithServiceAccountName sets the ServiceAccountName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccountName field is set to the value of the last call.
func (b *ServiceImportSpecApplyConfiguration) WithServiceAccountName(value string) *ServiceImportSpecApplyConfiguration {
	b.ServiceAccountName = &value
	return b
}
