/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SyncToFgwSpecApplyConfiguration represents an declarative configuration of the SyncToFgwSpec type for use
// with apply.
type SyncToFgwSpecApplyConfiguration struct {
	Enable             *bool        `json:"enable,omitempty"`
	SyncPeriod         *v1.Duration `json:"syncPeriod,omitempty"`
	DefaultSync        *bool        `json:"defaultSync,omitempty"`
	AllowK8sNamespaces []string     `json:"allowK8sNamespaces,omitempty"`
	DenyK8sNamespaces  []string     `json:"denyK8sNamespaces,omitempty"`
}

// SyncToFgwSpecApplyConfiguration constructs an declarative configuration of the SyncToFgwSpec type for use with
// apply.
func SyncToFgwSpec() *SyncToFgwSpecApplyConfiguration {
	return &SyncToFgwSpecApplyConfiguration{}
}

// WithEnable sets the Enable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enable field is set to the value of the last call.
func (b *SyncToFgwSpecApplyConfiguration) WithEnable(value bool) *SyncToFgwSpecApplyConfiguration {
	b.Enable = &value
	return b
}

// WithSyncPeriod sets the SyncPeriod field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncPeriod field is set to the value of the last call.
func (b *SyncToFgwSpecApplyConfiguration) WithSyncPeriod(value v1.Duration) *SyncToFgwSpecApplyConfiguration {
	b.SyncPeriod = &value
	return b
}

// WithDefaultSync sets the DefaultSync field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefaultSync field is set to the value of the last call.
func (b *SyncToFgwSpecApplyConfiguration) WithDefaultSync(value bool) *SyncToFgwSpecApplyConfiguration {
	b.DefaultSync = &value
	return b
}

// WithAllowK8sNamespaces adds the given value to the AllowK8sNamespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AllowK8sNamespaces field.
func (b *SyncToFgwSpecApplyConfiguration) WithAllowK8sNamespaces(values ...string) *SyncToFgwSpecApplyConfiguration {
	for i := range values {
		b.AllowK8sNamespaces = append(b.AllowK8sNamespaces, values[i])
	}
	return b
}

// WithDenyK8sNamespaces adds the given value to the DenyK8sNamespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DenyK8sNamespaces field.
func (b *SyncToFgwSpecApplyConfiguration) WithDenyK8sNamespaces(values ...string) *SyncToFgwSpecApplyConfiguration {
	for i := range values {
		b.DenyK8sNamespaces = append(b.DenyK8sNamespaces, values[i])
	}
	return b
}
