/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// NacosSyncToK8SSpecApplyConfiguration represents an declarative configuration of the NacosSyncToK8SSpec type for use
// with apply.
type NacosSyncToK8SSpecApplyConfiguration struct {
	Enable          *bool                         `json:"enable,omitempty"`
	ClusterId       *string                       `json:"clusterId,omitempty"`
	PassingOnly     *bool                         `json:"passingOnly,omitempty"`
	FilterMetadatas []MetadataApplyConfiguration  `json:"filterMetadatas,omitempty"`
	PrefixMetadata  *string                       `json:"prefixMetadata,omitempty"`
	SuffixMetadata  *string                       `json:"suffixMetadata,omitempty"`
	ClusterSet      []string                      `json:"clusterSet,omitempty"`
	GroupSet        []string                      `json:"groupSet,omitempty"`
	WithGateway     *C2KGatewayApplyConfiguration `json:"withGateway,omitempty"`
}

// NacosSyncToK8SSpecApplyConfiguration constructs an declarative configuration of the NacosSyncToK8SSpec type for use with
// apply.
func NacosSyncToK8SSpec() *NacosSyncToK8SSpecApplyConfiguration {
	return &NacosSyncToK8SSpecApplyConfiguration{}
}

// WithEnable sets the Enable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enable field is set to the value of the last call.
func (b *NacosSyncToK8SSpecApplyConfiguration) WithEnable(value bool) *NacosSyncToK8SSpecApplyConfiguration {
	b.Enable = &value
	return b
}

// WithClusterId sets the ClusterId field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterId field is set to the value of the last call.
func (b *NacosSyncToK8SSpecApplyConfiguration) WithClusterId(value string) *NacosSyncToK8SSpecApplyConfiguration {
	b.ClusterId = &value
	return b
}

// WithPassingOnly sets the PassingOnly field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PassingOnly field is set to the value of the last call.
func (b *NacosSyncToK8SSpecApplyConfiguration) WithPassingOnly(value bool) *NacosSyncToK8SSpecApplyConfiguration {
	b.PassingOnly = &value
	return b
}

// WithFilterMetadatas adds the given value to the FilterMetadatas field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FilterMetadatas field.
func (b *NacosSyncToK8SSpecApplyConfiguration) WithFilterMetadatas(values ...*MetadataApplyConfiguration) *NacosSyncToK8SSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFilterMetadatas")
		}
		b.FilterMetadatas = append(b.FilterMetadatas, *values[i])
	}
	return b
}

// WithPrefixMetadata sets the PrefixMetadata field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrefixMetadata field is set to the value of the last call.
func (b *NacosSyncToK8SSpecApplyConfiguration) WithPrefixMetadata(value string) *NacosSyncToK8SSpecApplyConfiguration {
	b.PrefixMetadata = &value
	return b
}

// WithSuffixMetadata sets the SuffixMetadata field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SuffixMetadata field is set to the value of the last call.
func (b *NacosSyncToK8SSpecApplyConfiguration) WithSuffixMetadata(value string) *NacosSyncToK8SSpecApplyConfiguration {
	b.SuffixMetadata = &value
	return b
}

// WithClusterSet adds the given value to the ClusterSet field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClusterSet field.
func (b *NacosSyncToK8SSpecApplyConfiguration) WithClusterSet(values ...string) *NacosSyncToK8SSpecApplyConfiguration {
	for i := range values {
		b.ClusterSet = append(b.ClusterSet, values[i])
	}
	return b
}

// WithGroupSet adds the given value to the GroupSet field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the GroupSet field.
func (b *NacosSyncToK8SSpecApplyConfiguration) WithGroupSet(values ...string) *NacosSyncToK8SSpecApplyConfiguration {
	for i := range values {
		b.GroupSet = append(b.GroupSet, values[i])
	}
	return b
}

// WithWithGateway sets the WithGateway field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WithGateway field is set to the value of the last call.
func (b *NacosSyncToK8SSpecApplyConfiguration) WithWithGateway(value *C2KGatewayApplyConfiguration) *NacosSyncToK8SSpecApplyConfiguration {
	b.WithGateway = value
	return b
}
