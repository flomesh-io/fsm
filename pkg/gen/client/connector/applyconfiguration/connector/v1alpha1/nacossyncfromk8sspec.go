/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/flomesh-io/fsm/pkg/apis/connector/v1alpha1"
)

// NacosSyncFromK8SSpecApplyConfiguration represents an declarative configuration of the NacosSyncFromK8SSpec type for use
// with apply.
type NacosSyncFromK8SSpecApplyConfiguration struct {
	Enable                         *bool                        `json:"enable,omitempty"`
	ClusterId                      *string                      `json:"clusterId,omitempty"`
	GroupId                        *string                      `json:"groupId,omitempty"`
	DefaultSync                    *bool                        `json:"defaultSync,omitempty"`
	SyncClusterIPServices          *bool                        `json:"syncClusterIPServices,omitempty"`
	SyncLoadBalancerEndpoints      *bool                        `json:"syncLoadBalancerEndpoints,omitempty"`
	NodePortSyncType               *v1alpha1.NodePortSyncType   `json:"nodePortSyncType,omitempty"`
	SyncIngress                    *bool                        `json:"syncIngress,omitempty"`
	SyncIngressLoadBalancerIPs     *bool                        `json:"syncIngressLoadBalancerIPs,omitempty"`
	AddServicePrefix               *string                      `json:"addServicePrefix,omitempty"`
	AddK8SNamespaceAsServiceSuffix *bool                        `json:"addK8SNamespaceAsServiceSuffix,omitempty"`
	AppendMetadatas                []MetadataApplyConfiguration `json:"appendMetadatas,omitempty"`
	AllowK8sNamespaces             []string                     `json:"allowK8sNamespaces,omitempty"`
	DenyK8sNamespaces              []string                     `json:"denyK8sNamespaces,omitempty"`
	WithGateway                    *bool                        `json:"withGateway,omitempty"`
	WithGatewayMode                *v1alpha1.WithGatewayMode    `json:"withGatewayMode,omitempty"`
}

// NacosSyncFromK8SSpecApplyConfiguration constructs an declarative configuration of the NacosSyncFromK8SSpec type for use with
// apply.
func NacosSyncFromK8SSpec() *NacosSyncFromK8SSpecApplyConfiguration {
	return &NacosSyncFromK8SSpecApplyConfiguration{}
}

// WithEnable sets the Enable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enable field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithEnable(value bool) *NacosSyncFromK8SSpecApplyConfiguration {
	b.Enable = &value
	return b
}

// WithClusterId sets the ClusterId field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterId field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithClusterId(value string) *NacosSyncFromK8SSpecApplyConfiguration {
	b.ClusterId = &value
	return b
}

// WithGroupId sets the GroupId field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GroupId field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithGroupId(value string) *NacosSyncFromK8SSpecApplyConfiguration {
	b.GroupId = &value
	return b
}

// WithDefaultSync sets the DefaultSync field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefaultSync field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithDefaultSync(value bool) *NacosSyncFromK8SSpecApplyConfiguration {
	b.DefaultSync = &value
	return b
}

// WithSyncClusterIPServices sets the SyncClusterIPServices field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncClusterIPServices field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithSyncClusterIPServices(value bool) *NacosSyncFromK8SSpecApplyConfiguration {
	b.SyncClusterIPServices = &value
	return b
}

// WithSyncLoadBalancerEndpoints sets the SyncLoadBalancerEndpoints field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncLoadBalancerEndpoints field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithSyncLoadBalancerEndpoints(value bool) *NacosSyncFromK8SSpecApplyConfiguration {
	b.SyncLoadBalancerEndpoints = &value
	return b
}

// WithNodePortSyncType sets the NodePortSyncType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodePortSyncType field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithNodePortSyncType(value v1alpha1.NodePortSyncType) *NacosSyncFromK8SSpecApplyConfiguration {
	b.NodePortSyncType = &value
	return b
}

// WithSyncIngress sets the SyncIngress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncIngress field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithSyncIngress(value bool) *NacosSyncFromK8SSpecApplyConfiguration {
	b.SyncIngress = &value
	return b
}

// WithSyncIngressLoadBalancerIPs sets the SyncIngressLoadBalancerIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncIngressLoadBalancerIPs field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithSyncIngressLoadBalancerIPs(value bool) *NacosSyncFromK8SSpecApplyConfiguration {
	b.SyncIngressLoadBalancerIPs = &value
	return b
}

// WithAddServicePrefix sets the AddServicePrefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AddServicePrefix field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithAddServicePrefix(value string) *NacosSyncFromK8SSpecApplyConfiguration {
	b.AddServicePrefix = &value
	return b
}

// WithAddK8SNamespaceAsServiceSuffix sets the AddK8SNamespaceAsServiceSuffix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AddK8SNamespaceAsServiceSuffix field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithAddK8SNamespaceAsServiceSuffix(value bool) *NacosSyncFromK8SSpecApplyConfiguration {
	b.AddK8SNamespaceAsServiceSuffix = &value
	return b
}

// WithAppendMetadatas adds the given value to the AppendMetadatas field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AppendMetadatas field.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithAppendMetadatas(values ...*MetadataApplyConfiguration) *NacosSyncFromK8SSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAppendMetadatas")
		}
		b.AppendMetadatas = append(b.AppendMetadatas, *values[i])
	}
	return b
}

// WithAllowK8sNamespaces adds the given value to the AllowK8sNamespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AllowK8sNamespaces field.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithAllowK8sNamespaces(values ...string) *NacosSyncFromK8SSpecApplyConfiguration {
	for i := range values {
		b.AllowK8sNamespaces = append(b.AllowK8sNamespaces, values[i])
	}
	return b
}

// WithDenyK8sNamespaces adds the given value to the DenyK8sNamespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DenyK8sNamespaces field.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithDenyK8sNamespaces(values ...string) *NacosSyncFromK8SSpecApplyConfiguration {
	for i := range values {
		b.DenyK8sNamespaces = append(b.DenyK8sNamespaces, values[i])
	}
	return b
}

// WithWithGateway sets the WithGateway field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WithGateway field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithWithGateway(value bool) *NacosSyncFromK8SSpecApplyConfiguration {
	b.WithGateway = &value
	return b
}

// WithWithGatewayMode sets the WithGatewayMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WithGatewayMode field is set to the value of the last call.
func (b *NacosSyncFromK8SSpecApplyConfiguration) WithWithGatewayMode(value v1alpha1.WithGatewayMode) *NacosSyncFromK8SSpecApplyConfiguration {
	b.WithGatewayMode = &value
	return b
}
