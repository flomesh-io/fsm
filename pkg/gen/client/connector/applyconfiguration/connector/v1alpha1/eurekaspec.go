/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EurekaSpecApplyConfiguration represents an declarative configuration of the EurekaSpec type for use
// with apply.
type EurekaSpecApplyConfiguration struct {
	HTTPAddr           *string                                  `json:"httpAddr,omitempty"`
	DeriveNamespace    *string                                  `json:"deriveNamespace,omitempty"`
	AsInternalServices *bool                                    `json:"asInternalServices,omitempty"`
	SyncPeriod         *v1.Duration                             `json:"syncPeriod,omitempty"`
	SyncToK8S          *EurekaSyncToK8SSpecApplyConfiguration   `json:"syncToK8S,omitempty"`
	SyncFromK8S        *EurekaSyncFromK8SSpecApplyConfiguration `json:"syncFromK8S,omitempty"`
	Limiter            *LimiterApplyConfiguration               `json:"Limiter,omitempty"`
	Resources          *corev1.ResourceRequirements             `json:"resources,omitempty"`
	Replicas           *int32                                   `json:"replicas,omitempty"`
}

// EurekaSpecApplyConfiguration constructs an declarative configuration of the EurekaSpec type for use with
// apply.
func EurekaSpec() *EurekaSpecApplyConfiguration {
	return &EurekaSpecApplyConfiguration{}
}

// WithHTTPAddr sets the HTTPAddr field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HTTPAddr field is set to the value of the last call.
func (b *EurekaSpecApplyConfiguration) WithHTTPAddr(value string) *EurekaSpecApplyConfiguration {
	b.HTTPAddr = &value
	return b
}

// WithDeriveNamespace sets the DeriveNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeriveNamespace field is set to the value of the last call.
func (b *EurekaSpecApplyConfiguration) WithDeriveNamespace(value string) *EurekaSpecApplyConfiguration {
	b.DeriveNamespace = &value
	return b
}

// WithAsInternalServices sets the AsInternalServices field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AsInternalServices field is set to the value of the last call.
func (b *EurekaSpecApplyConfiguration) WithAsInternalServices(value bool) *EurekaSpecApplyConfiguration {
	b.AsInternalServices = &value
	return b
}

// WithSyncPeriod sets the SyncPeriod field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncPeriod field is set to the value of the last call.
func (b *EurekaSpecApplyConfiguration) WithSyncPeriod(value v1.Duration) *EurekaSpecApplyConfiguration {
	b.SyncPeriod = &value
	return b
}

// WithSyncToK8S sets the SyncToK8S field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncToK8S field is set to the value of the last call.
func (b *EurekaSpecApplyConfiguration) WithSyncToK8S(value *EurekaSyncToK8SSpecApplyConfiguration) *EurekaSpecApplyConfiguration {
	b.SyncToK8S = value
	return b
}

// WithSyncFromK8S sets the SyncFromK8S field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncFromK8S field is set to the value of the last call.
func (b *EurekaSpecApplyConfiguration) WithSyncFromK8S(value *EurekaSyncFromK8SSpecApplyConfiguration) *EurekaSpecApplyConfiguration {
	b.SyncFromK8S = value
	return b
}

// WithLimiter sets the Limiter field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Limiter field is set to the value of the last call.
func (b *EurekaSpecApplyConfiguration) WithLimiter(value *LimiterApplyConfiguration) *EurekaSpecApplyConfiguration {
	b.Limiter = value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *EurekaSpecApplyConfiguration) WithResources(value corev1.ResourceRequirements) *EurekaSpecApplyConfiguration {
	b.Resources = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *EurekaSpecApplyConfiguration) WithReplicas(value int32) *EurekaSpecApplyConfiguration {
	b.Replicas = &value
	return b
}
