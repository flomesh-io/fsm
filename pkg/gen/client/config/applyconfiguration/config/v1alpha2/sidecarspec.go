/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	configv1alpha2 "github.com/flomesh-io/fsm/pkg/apis/config/v1alpha2"
	v1 "k8s.io/api/core/v1"
)

// SidecarSpecApplyConfiguration represents an declarative configuration of the SidecarSpec type for use
// with apply.
type SidecarSpecApplyConfiguration struct {
	EnablePrivilegedInitContainer *bool                                 `json:"enablePrivilegedInitContainer,omitempty"`
	LogLevel                      *string                               `json:"logLevel,omitempty"`
	SidecarClass                  *string                               `json:"sidecarClass,omitempty"`
	SidecarImage                  *string                               `json:"sidecarImage,omitempty"`
	SidecarDisabledMTLS           *bool                                 `json:"sidecarDisabledMTLS,omitempty"`
	InitContainerImage            *string                               `json:"initContainerImage,omitempty"`
	SidecarDrivers                []SidecarDriverSpecApplyConfiguration `json:"sidecarDrivers,omitempty"`
	MaxDataPlaneConnections       *int                                  `json:"maxDataPlaneConnections,omitempty"`
	ConfigResyncInterval          *string                               `json:"configResyncInterval,omitempty"`
	SidecarTimeout                *int                                  `json:"sidecarTimeout,omitempty"`
	Resources                     *v1.ResourceRequirements              `json:"resources,omitempty"`
	TLSMinProtocolVersion         *string                               `json:"tlsMinProtocolVersion,omitempty"`
	TLSMaxProtocolVersion         *string                               `json:"tlsMaxProtocolVersion,omitempty"`
	CipherSuites                  []string                              `json:"cipherSuites,omitempty"`
	ECDHCurves                    []string                              `json:"ecdhCurves,omitempty"`
	LocalProxyMode                *configv1alpha2.LocalProxyMode        `json:"localProxyMode,omitempty"`
	LocalDNSProxy                 *LocalDNSProxyApplyConfiguration      `json:"localDNSProxy,omitempty"`
}

// SidecarSpecApplyConfiguration constructs an declarative configuration of the SidecarSpec type for use with
// apply.
func SidecarSpec() *SidecarSpecApplyConfiguration {
	return &SidecarSpecApplyConfiguration{}
}

// WithEnablePrivilegedInitContainer sets the EnablePrivilegedInitContainer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnablePrivilegedInitContainer field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithEnablePrivilegedInitContainer(value bool) *SidecarSpecApplyConfiguration {
	b.EnablePrivilegedInitContainer = &value
	return b
}

// WithLogLevel sets the LogLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogLevel field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithLogLevel(value string) *SidecarSpecApplyConfiguration {
	b.LogLevel = &value
	return b
}

// WithSidecarClass sets the SidecarClass field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SidecarClass field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithSidecarClass(value string) *SidecarSpecApplyConfiguration {
	b.SidecarClass = &value
	return b
}

// WithSidecarImage sets the SidecarImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SidecarImage field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithSidecarImage(value string) *SidecarSpecApplyConfiguration {
	b.SidecarImage = &value
	return b
}

// WithSidecarDisabledMTLS sets the SidecarDisabledMTLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SidecarDisabledMTLS field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithSidecarDisabledMTLS(value bool) *SidecarSpecApplyConfiguration {
	b.SidecarDisabledMTLS = &value
	return b
}

// WithInitContainerImage sets the InitContainerImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InitContainerImage field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithInitContainerImage(value string) *SidecarSpecApplyConfiguration {
	b.InitContainerImage = &value
	return b
}

// WithSidecarDrivers adds the given value to the SidecarDrivers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SidecarDrivers field.
func (b *SidecarSpecApplyConfiguration) WithSidecarDrivers(values ...*SidecarDriverSpecApplyConfiguration) *SidecarSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSidecarDrivers")
		}
		b.SidecarDrivers = append(b.SidecarDrivers, *values[i])
	}
	return b
}

// WithMaxDataPlaneConnections sets the MaxDataPlaneConnections field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxDataPlaneConnections field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithMaxDataPlaneConnections(value int) *SidecarSpecApplyConfiguration {
	b.MaxDataPlaneConnections = &value
	return b
}

// WithConfigResyncInterval sets the ConfigResyncInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigResyncInterval field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithConfigResyncInterval(value string) *SidecarSpecApplyConfiguration {
	b.ConfigResyncInterval = &value
	return b
}

// WithSidecarTimeout sets the SidecarTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SidecarTimeout field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithSidecarTimeout(value int) *SidecarSpecApplyConfiguration {
	b.SidecarTimeout = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithResources(value v1.ResourceRequirements) *SidecarSpecApplyConfiguration {
	b.Resources = &value
	return b
}

// WithTLSMinProtocolVersion sets the TLSMinProtocolVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLSMinProtocolVersion field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithTLSMinProtocolVersion(value string) *SidecarSpecApplyConfiguration {
	b.TLSMinProtocolVersion = &value
	return b
}

// WithTLSMaxProtocolVersion sets the TLSMaxProtocolVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLSMaxProtocolVersion field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithTLSMaxProtocolVersion(value string) *SidecarSpecApplyConfiguration {
	b.TLSMaxProtocolVersion = &value
	return b
}

// WithCipherSuites adds the given value to the CipherSuites field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CipherSuites field.
func (b *SidecarSpecApplyConfiguration) WithCipherSuites(values ...string) *SidecarSpecApplyConfiguration {
	for i := range values {
		b.CipherSuites = append(b.CipherSuites, values[i])
	}
	return b
}

// WithECDHCurves adds the given value to the ECDHCurves field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ECDHCurves field.
func (b *SidecarSpecApplyConfiguration) WithECDHCurves(values ...string) *SidecarSpecApplyConfiguration {
	for i := range values {
		b.ECDHCurves = append(b.ECDHCurves, values[i])
	}
	return b
}

// WithLocalProxyMode sets the LocalProxyMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LocalProxyMode field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithLocalProxyMode(value configv1alpha2.LocalProxyMode) *SidecarSpecApplyConfiguration {
	b.LocalProxyMode = &value
	return b
}

// WithLocalDNSProxy sets the LocalDNSProxy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LocalDNSProxy field is set to the value of the last call.
func (b *SidecarSpecApplyConfiguration) WithLocalDNSProxy(value *LocalDNSProxyApplyConfiguration) *SidecarSpecApplyConfiguration {
	b.LocalDNSProxy = value
	return b
}
