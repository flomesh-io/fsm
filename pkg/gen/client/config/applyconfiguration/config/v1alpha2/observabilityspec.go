/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// ObservabilitySpecApplyConfiguration represents an declarative configuration of the ObservabilitySpec type for use
// with apply.
type ObservabilitySpecApplyConfiguration struct {
	FSMLogLevel       *string                              `json:"fsmLogLevel,omitempty"`
	EnableDebugServer *bool                                `json:"enableDebugServer,omitempty"`
	Tracing           *TracingSpecApplyConfiguration       `json:"tracing,omitempty"`
	RemoteLogging     *RemoteLoggingSpecApplyConfiguration `json:"remoteLogging,omitempty"`
}

// ObservabilitySpecApplyConfiguration constructs an declarative configuration of the ObservabilitySpec type for use with
// apply.
func ObservabilitySpec() *ObservabilitySpecApplyConfiguration {
	return &ObservabilitySpecApplyConfiguration{}
}

// WithFSMLogLevel sets the FSMLogLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FSMLogLevel field is set to the value of the last call.
func (b *ObservabilitySpecApplyConfiguration) WithFSMLogLevel(value string) *ObservabilitySpecApplyConfiguration {
	b.FSMLogLevel = &value
	return b
}

// WithEnableDebugServer sets the EnableDebugServer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnableDebugServer field is set to the value of the last call.
func (b *ObservabilitySpecApplyConfiguration) WithEnableDebugServer(value bool) *ObservabilitySpecApplyConfiguration {
	b.EnableDebugServer = &value
	return b
}

// WithTracing sets the Tracing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tracing field is set to the value of the last call.
func (b *ObservabilitySpecApplyConfiguration) WithTracing(value *TracingSpecApplyConfiguration) *ObservabilitySpecApplyConfiguration {
	b.Tracing = value
	return b
}

// WithRemoteLogging sets the RemoteLogging field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RemoteLogging field is set to the value of the last call.
func (b *ObservabilitySpecApplyConfiguration) WithRemoteLogging(value *RemoteLoggingSpecApplyConfiguration) *ObservabilitySpecApplyConfiguration {
	b.RemoteLogging = value
	return b
}
