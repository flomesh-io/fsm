/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/flomesh-io/fsm/pkg/apis/config/v1alpha2"
)

// PluginChainsSpecApplyConfiguration represents an declarative configuration of the PluginChainsSpec type for use
// with apply.
type PluginChainsSpecApplyConfiguration struct {
	InboundTCPChains   []*v1alpha2.PluginChainSpec `json:"inbound-tcp,omitempty"`
	InboundHTTPChains  []*v1alpha2.PluginChainSpec `json:"inbound-http,omitempty"`
	OutboundTCPChains  []*v1alpha2.PluginChainSpec `json:"outbound-tcp,omitempty"`
	OutboundHTTPChains []*v1alpha2.PluginChainSpec `json:"outbound-http,omitempty"`
}

// PluginChainsSpecApplyConfiguration constructs an declarative configuration of the PluginChainsSpec type for use with
// apply.
func PluginChainsSpec() *PluginChainsSpecApplyConfiguration {
	return &PluginChainsSpecApplyConfiguration{}
}

// WithInboundTCPChains adds the given value to the InboundTCPChains field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InboundTCPChains field.
func (b *PluginChainsSpecApplyConfiguration) WithInboundTCPChains(values ...**v1alpha2.PluginChainSpec) *PluginChainsSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInboundTCPChains")
		}
		b.InboundTCPChains = append(b.InboundTCPChains, *values[i])
	}
	return b
}

// WithInboundHTTPChains adds the given value to the InboundHTTPChains field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InboundHTTPChains field.
func (b *PluginChainsSpecApplyConfiguration) WithInboundHTTPChains(values ...**v1alpha2.PluginChainSpec) *PluginChainsSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInboundHTTPChains")
		}
		b.InboundHTTPChains = append(b.InboundHTTPChains, *values[i])
	}
	return b
}

// WithOutboundTCPChains adds the given value to the OutboundTCPChains field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OutboundTCPChains field.
func (b *PluginChainsSpecApplyConfiguration) WithOutboundTCPChains(values ...**v1alpha2.PluginChainSpec) *PluginChainsSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOutboundTCPChains")
		}
		b.OutboundTCPChains = append(b.OutboundTCPChains, *values[i])
	}
	return b
}

// WithOutboundHTTPChains adds the given value to the OutboundHTTPChains field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OutboundHTTPChains field.
func (b *PluginChainsSpecApplyConfiguration) WithOutboundHTTPChains(values ...**v1alpha2.PluginChainSpec) *PluginChainsSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOutboundHTTPChains")
		}
		b.OutboundHTTPChains = append(b.OutboundHTTPChains, *values[i])
	}
	return b
}
