/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

// HTTPApplyConfiguration represents an declarative configuration of the HTTP type for use
// with apply.
type HTTPApplyConfiguration struct {
	Enabled  *bool  `json:"enabled,omitempty"`
	Bind     *int32 `json:"bind,omitempty"`
	Listen   *int32 `json:"listen,omitempty"`
	NodePort *int32 `json:"nodePort,omitempty"`
}

// HTTPApplyConfiguration constructs an declarative configuration of the HTTP type for use with
// apply.
func HTTP() *HTTPApplyConfiguration {
	return &HTTPApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *HTTPApplyConfiguration) WithEnabled(value bool) *HTTPApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithBind sets the Bind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Bind field is set to the value of the last call.
func (b *HTTPApplyConfiguration) WithBind(value int32) *HTTPApplyConfiguration {
	b.Bind = &value
	return b
}

// WithListen sets the Listen field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Listen field is set to the value of the last call.
func (b *HTTPApplyConfiguration) WithListen(value int32) *HTTPApplyConfiguration {
	b.Listen = &value
	return b
}

// WithNodePort sets the NodePort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodePort field is set to the value of the last call.
func (b *HTTPApplyConfiguration) WithNodePort(value int32) *HTTPApplyConfiguration {
	b.NodePort = &value
	return b
}
