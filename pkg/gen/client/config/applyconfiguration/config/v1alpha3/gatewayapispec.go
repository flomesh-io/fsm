/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

// GatewayAPISpecApplyConfiguration represents an declarative configuration of the GatewayAPISpec type for use
// with apply.
type GatewayAPISpecApplyConfiguration struct {
	Enabled                      *bool                       `json:"enabled,omitempty"`
	LogLevel                     *string                     `json:"logLevel,omitempty"`
	FGWLogLevel                  *string                     `json:"fgwLogLevel,omitempty"`
	StripAnyHostPort             *bool                       `json:"StripAnyHostPort,omitempty"`
	SSLPassthroughUpstreamPort   *int32                      `json:"sslPassthroughUpstreamPort,omitempty"`
	HTTP1PerRequestLoadBalancing *bool                       `json:"http1PerRequestLoadBalancing,omitempty"`
	HTTP2PerRequestLoadBalancing *bool                       `json:"http2PerRequestLoadBalancing,omitempty"`
	ProxyTag                     *ProxyTagApplyConfiguration `json:"proxyTag,omitempty"`
}

// GatewayAPISpecApplyConfiguration constructs an declarative configuration of the GatewayAPISpec type for use with
// apply.
func GatewayAPISpec() *GatewayAPISpecApplyConfiguration {
	return &GatewayAPISpecApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *GatewayAPISpecApplyConfiguration) WithEnabled(value bool) *GatewayAPISpecApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithLogLevel sets the LogLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogLevel field is set to the value of the last call.
func (b *GatewayAPISpecApplyConfiguration) WithLogLevel(value string) *GatewayAPISpecApplyConfiguration {
	b.LogLevel = &value
	return b
}

// WithFGWLogLevel sets the FGWLogLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FGWLogLevel field is set to the value of the last call.
func (b *GatewayAPISpecApplyConfiguration) WithFGWLogLevel(value string) *GatewayAPISpecApplyConfiguration {
	b.FGWLogLevel = &value
	return b
}

// WithStripAnyHostPort sets the StripAnyHostPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StripAnyHostPort field is set to the value of the last call.
func (b *GatewayAPISpecApplyConfiguration) WithStripAnyHostPort(value bool) *GatewayAPISpecApplyConfiguration {
	b.StripAnyHostPort = &value
	return b
}

// WithSSLPassthroughUpstreamPort sets the SSLPassthroughUpstreamPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SSLPassthroughUpstreamPort field is set to the value of the last call.
func (b *GatewayAPISpecApplyConfiguration) WithSSLPassthroughUpstreamPort(value int32) *GatewayAPISpecApplyConfiguration {
	b.SSLPassthroughUpstreamPort = &value
	return b
}

// WithHTTP1PerRequestLoadBalancing sets the HTTP1PerRequestLoadBalancing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HTTP1PerRequestLoadBalancing field is set to the value of the last call.
func (b *GatewayAPISpecApplyConfiguration) WithHTTP1PerRequestLoadBalancing(value bool) *GatewayAPISpecApplyConfiguration {
	b.HTTP1PerRequestLoadBalancing = &value
	return b
}

// WithHTTP2PerRequestLoadBalancing sets the HTTP2PerRequestLoadBalancing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HTTP2PerRequestLoadBalancing field is set to the value of the last call.
func (b *GatewayAPISpecApplyConfiguration) WithHTTP2PerRequestLoadBalancing(value bool) *GatewayAPISpecApplyConfiguration {
	b.HTTP2PerRequestLoadBalancing = &value
	return b
}

// WithProxyTag sets the ProxyTag field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProxyTag field is set to the value of the last call.
func (b *GatewayAPISpecApplyConfiguration) WithProxyTag(value *ProxyTagApplyConfiguration) *GatewayAPISpecApplyConfiguration {
	b.ProxyTag = value
	return b
}
