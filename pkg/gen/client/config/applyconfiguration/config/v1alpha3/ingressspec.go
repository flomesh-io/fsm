/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

import (
	v1 "k8s.io/api/core/v1"
)

// IngressSpecApplyConfiguration represents an declarative configuration of the IngressSpec type for use
// with apply.
type IngressSpecApplyConfiguration struct {
	Enabled    *bool                   `json:"enabled,omitempty"`
	Namespaced *bool                   `json:"namespaced,omitempty"`
	Type       *v1.ServiceType         `json:"type,omitempty"`
	LogLevel   *string                 `json:"logLevel,omitempty"`
	HTTP       *HTTPApplyConfiguration `json:"http,omitempty"`
	TLS        *TLSApplyConfiguration  `json:"tls,omitempty"`
}

// IngressSpecApplyConfiguration constructs an declarative configuration of the IngressSpec type for use with
// apply.
func IngressSpec() *IngressSpecApplyConfiguration {
	return &IngressSpecApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithEnabled(value bool) *IngressSpecApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithNamespaced sets the Namespaced field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespaced field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithNamespaced(value bool) *IngressSpecApplyConfiguration {
	b.Namespaced = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithType(value v1.ServiceType) *IngressSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithLogLevel sets the LogLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogLevel field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithLogLevel(value string) *IngressSpecApplyConfiguration {
	b.LogLevel = &value
	return b
}

// WithHTTP sets the HTTP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HTTP field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithHTTP(value *HTTPApplyConfiguration) *IngressSpecApplyConfiguration {
	b.HTTP = value
	return b
}

// WithTLS sets the TLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLS field is set to the value of the last call.
func (b *IngressSpecApplyConfiguration) WithTLS(value *TLSApplyConfiguration) *IngressSpecApplyConfiguration {
	b.TLS = value
	return b
}
