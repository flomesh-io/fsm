/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

// LocalDNSProxyApplyConfiguration represents an declarative configuration of the LocalDNSProxy type for use
// with apply.
type LocalDNSProxyApplyConfiguration struct {
	Enable                           *bool                         `json:"enable,omitempty"`
	SearchesWithNamespace            *bool                         `json:"searchesWithNamespace,omitempty"`
	SearchesWithTrustDomain          *bool                         `json:"searchesWithTrustDomain,omitempty"`
	PrimaryUpstreamDNSServerIPAddr   *string                       `json:"primaryUpstreamDNSServerIPAddr,omitempty"`
	SecondaryUpstreamDNSServerIPAddr *string                       `json:"secondaryUpstreamDNSServerIPAddr,omitempty"`
	Wildcard                         *WildcardDNApplyConfiguration `json:"wildcard,omitempty"`
	DB                               []ResolveDNApplyConfiguration `json:"db,omitempty"`
}

// LocalDNSProxyApplyConfiguration constructs an declarative configuration of the LocalDNSProxy type for use with
// apply.
func LocalDNSProxy() *LocalDNSProxyApplyConfiguration {
	return &LocalDNSProxyApplyConfiguration{}
}

// WithEnable sets the Enable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enable field is set to the value of the last call.
func (b *LocalDNSProxyApplyConfiguration) WithEnable(value bool) *LocalDNSProxyApplyConfiguration {
	b.Enable = &value
	return b
}

// WithSearchesWithNamespace sets the SearchesWithNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SearchesWithNamespace field is set to the value of the last call.
func (b *LocalDNSProxyApplyConfiguration) WithSearchesWithNamespace(value bool) *LocalDNSProxyApplyConfiguration {
	b.SearchesWithNamespace = &value
	return b
}

// WithSearchesWithTrustDomain sets the SearchesWithTrustDomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SearchesWithTrustDomain field is set to the value of the last call.
func (b *LocalDNSProxyApplyConfiguration) WithSearchesWithTrustDomain(value bool) *LocalDNSProxyApplyConfiguration {
	b.SearchesWithTrustDomain = &value
	return b
}

// WithPrimaryUpstreamDNSServerIPAddr sets the PrimaryUpstreamDNSServerIPAddr field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrimaryUpstreamDNSServerIPAddr field is set to the value of the last call.
func (b *LocalDNSProxyApplyConfiguration) WithPrimaryUpstreamDNSServerIPAddr(value string) *LocalDNSProxyApplyConfiguration {
	b.PrimaryUpstreamDNSServerIPAddr = &value
	return b
}

// WithSecondaryUpstreamDNSServerIPAddr sets the SecondaryUpstreamDNSServerIPAddr field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecondaryUpstreamDNSServerIPAddr field is set to the value of the last call.
func (b *LocalDNSProxyApplyConfiguration) WithSecondaryUpstreamDNSServerIPAddr(value string) *LocalDNSProxyApplyConfiguration {
	b.SecondaryUpstreamDNSServerIPAddr = &value
	return b
}

// WithWildcard sets the Wildcard field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Wildcard field is set to the value of the last call.
func (b *LocalDNSProxyApplyConfiguration) WithWildcard(value *WildcardDNApplyConfiguration) *LocalDNSProxyApplyConfiguration {
	b.Wildcard = value
	return b
}

// WithDB adds the given value to the DB field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DB field.
func (b *LocalDNSProxyApplyConfiguration) WithDB(values ...*ResolveDNApplyConfiguration) *LocalDNSProxyApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDB")
		}
		b.DB = append(b.DB, *values[i])
	}
	return b
}
