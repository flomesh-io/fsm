/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

// EgressGatewaySpecApplyConfiguration represents an declarative configuration of the EgressGatewaySpec type for use
// with apply.
type EgressGatewaySpecApplyConfiguration struct {
	Enabled   *bool   `json:"enabled,omitempty"`
	LogLevel  *string `json:"logLevel,omitempty"`
	Mode      *string `json:"mode,omitempty"`
	Port      *int32  `json:"port,omitempty"`
	AdminPort *int32  `json:"adminPort,omitempty"`
	Replicas  *int32  `json:"replicas,omitempty"`
}

// EgressGatewaySpecApplyConfiguration constructs an declarative configuration of the EgressGatewaySpec type for use with
// apply.
func EgressGatewaySpec() *EgressGatewaySpecApplyConfiguration {
	return &EgressGatewaySpecApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *EgressGatewaySpecApplyConfiguration) WithEnabled(value bool) *EgressGatewaySpecApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithLogLevel sets the LogLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogLevel field is set to the value of the last call.
func (b *EgressGatewaySpecApplyConfiguration) WithLogLevel(value string) *EgressGatewaySpecApplyConfiguration {
	b.LogLevel = &value
	return b
}

// WithMode sets the Mode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mode field is set to the value of the last call.
func (b *EgressGatewaySpecApplyConfiguration) WithMode(value string) *EgressGatewaySpecApplyConfiguration {
	b.Mode = &value
	return b
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *EgressGatewaySpecApplyConfiguration) WithPort(value int32) *EgressGatewaySpecApplyConfiguration {
	b.Port = &value
	return b
}

// WithAdminPort sets the AdminPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AdminPort field is set to the value of the last call.
func (b *EgressGatewaySpecApplyConfiguration) WithAdminPort(value int32) *EgressGatewaySpecApplyConfiguration {
	b.AdminPort = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *EgressGatewaySpecApplyConfiguration) WithReplicas(value int32) *EgressGatewaySpecApplyConfiguration {
	b.Replicas = &value
	return b
}
