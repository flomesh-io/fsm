/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

// TrafficSpecApplyConfiguration represents an declarative configuration of the TrafficSpec type for use
// with apply.
type TrafficSpecApplyConfiguration struct {
	InterceptionMode                  *string                              `json:"interceptionMode,omitempty"`
	EnableEgress                      *bool                                `json:"enableEgress,omitempty"`
	OutboundIPRangeExclusionList      []string                             `json:"outboundIPRangeExclusionList,omitempty"`
	OutboundIPRangeInclusionList      []string                             `json:"outboundIPRangeInclusionList,omitempty"`
	OutboundPortExclusionList         []int                                `json:"outboundPortExclusionList,omitempty"`
	InboundPortExclusionList          []int                                `json:"inboundPortExclusionList,omitempty"`
	EnablePermissiveTrafficPolicyMode *bool                                `json:"enablePermissiveTrafficPolicyMode,omitempty"`
	ServiceAccessMode                 *string                              `json:"serviceAccessMode,omitempty"`
	InboundExternalAuthorization      *ExternalAuthzSpecApplyConfiguration `json:"inboundExternalAuthorization,omitempty"`
	NetworkInterfaceExclusionList     []string                             `json:"networkInterfaceExclusionList,omitempty"`
	HTTP1PerRequestLoadBalancing      *bool                                `json:"http1PerRequestLoadBalancing,omitempty"`
	HTTP2PerRequestLoadBalancing      *bool                                `json:"http2PerRequestLoadBalancing,omitempty"`
}

// TrafficSpecApplyConfiguration constructs an declarative configuration of the TrafficSpec type for use with
// apply.
func TrafficSpec() *TrafficSpecApplyConfiguration {
	return &TrafficSpecApplyConfiguration{}
}

// WithInterceptionMode sets the InterceptionMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InterceptionMode field is set to the value of the last call.
func (b *TrafficSpecApplyConfiguration) WithInterceptionMode(value string) *TrafficSpecApplyConfiguration {
	b.InterceptionMode = &value
	return b
}

// WithEnableEgress sets the EnableEgress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnableEgress field is set to the value of the last call.
func (b *TrafficSpecApplyConfiguration) WithEnableEgress(value bool) *TrafficSpecApplyConfiguration {
	b.EnableEgress = &value
	return b
}

// WithOutboundIPRangeExclusionList adds the given value to the OutboundIPRangeExclusionList field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OutboundIPRangeExclusionList field.
func (b *TrafficSpecApplyConfiguration) WithOutboundIPRangeExclusionList(values ...string) *TrafficSpecApplyConfiguration {
	for i := range values {
		b.OutboundIPRangeExclusionList = append(b.OutboundIPRangeExclusionList, values[i])
	}
	return b
}

// WithOutboundIPRangeInclusionList adds the given value to the OutboundIPRangeInclusionList field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OutboundIPRangeInclusionList field.
func (b *TrafficSpecApplyConfiguration) WithOutboundIPRangeInclusionList(values ...string) *TrafficSpecApplyConfiguration {
	for i := range values {
		b.OutboundIPRangeInclusionList = append(b.OutboundIPRangeInclusionList, values[i])
	}
	return b
}

// WithOutboundPortExclusionList adds the given value to the OutboundPortExclusionList field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OutboundPortExclusionList field.
func (b *TrafficSpecApplyConfiguration) WithOutboundPortExclusionList(values ...int) *TrafficSpecApplyConfiguration {
	for i := range values {
		b.OutboundPortExclusionList = append(b.OutboundPortExclusionList, values[i])
	}
	return b
}

// WithInboundPortExclusionList adds the given value to the InboundPortExclusionList field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InboundPortExclusionList field.
func (b *TrafficSpecApplyConfiguration) WithInboundPortExclusionList(values ...int) *TrafficSpecApplyConfiguration {
	for i := range values {
		b.InboundPortExclusionList = append(b.InboundPortExclusionList, values[i])
	}
	return b
}

// WithEnablePermissiveTrafficPolicyMode sets the EnablePermissiveTrafficPolicyMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnablePermissiveTrafficPolicyMode field is set to the value of the last call.
func (b *TrafficSpecApplyConfiguration) WithEnablePermissiveTrafficPolicyMode(value bool) *TrafficSpecApplyConfiguration {
	b.EnablePermissiveTrafficPolicyMode = &value
	return b
}

// WithServiceAccessMode sets the ServiceAccessMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccessMode field is set to the value of the last call.
func (b *TrafficSpecApplyConfiguration) WithServiceAccessMode(value string) *TrafficSpecApplyConfiguration {
	b.ServiceAccessMode = &value
	return b
}

// WithInboundExternalAuthorization sets the InboundExternalAuthorization field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InboundExternalAuthorization field is set to the value of the last call.
func (b *TrafficSpecApplyConfiguration) WithInboundExternalAuthorization(value *ExternalAuthzSpecApplyConfiguration) *TrafficSpecApplyConfiguration {
	b.InboundExternalAuthorization = value
	return b
}

// WithNetworkInterfaceExclusionList adds the given value to the NetworkInterfaceExclusionList field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NetworkInterfaceExclusionList field.
func (b *TrafficSpecApplyConfiguration) WithNetworkInterfaceExclusionList(values ...string) *TrafficSpecApplyConfiguration {
	for i := range values {
		b.NetworkInterfaceExclusionList = append(b.NetworkInterfaceExclusionList, values[i])
	}
	return b
}

// WithHTTP1PerRequestLoadBalancing sets the HTTP1PerRequestLoadBalancing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HTTP1PerRequestLoadBalancing field is set to the value of the last call.
func (b *TrafficSpecApplyConfiguration) WithHTTP1PerRequestLoadBalancing(value bool) *TrafficSpecApplyConfiguration {
	b.HTTP1PerRequestLoadBalancing = &value
	return b
}

// WithHTTP2PerRequestLoadBalancing sets the HTTP2PerRequestLoadBalancing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HTTP2PerRequestLoadBalancing field is set to the value of the last call.
func (b *TrafficSpecApplyConfiguration) WithHTTP2PerRequestLoadBalancing(value bool) *TrafficSpecApplyConfiguration {
	b.HTTP2PerRequestLoadBalancing = &value
	return b
}
