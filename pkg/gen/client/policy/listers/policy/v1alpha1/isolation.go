/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/flomesh-io/fsm/pkg/apis/policy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IsolationLister helps list Isolations.
// All objects returned here must be treated as read-only.
type IsolationLister interface {
	// List lists all Isolations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Isolation, err error)
	// Isolations returns an object that can list and get Isolations.
	Isolations(namespace string) IsolationNamespaceLister
	IsolationListerExpansion
}

// isolationLister implements the IsolationLister interface.
type isolationLister struct {
	indexer cache.Indexer
}

// NewIsolationLister returns a new IsolationLister.
func NewIsolationLister(indexer cache.Indexer) IsolationLister {
	return &isolationLister{indexer: indexer}
}

// List lists all Isolations in the indexer.
func (s *isolationLister) List(selector labels.Selector) (ret []*v1alpha1.Isolation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Isolation))
	})
	return ret, err
}

// Isolations returns an object that can list and get Isolations.
func (s *isolationLister) Isolations(namespace string) IsolationNamespaceLister {
	return isolationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IsolationNamespaceLister helps list and get Isolations.
// All objects returned here must be treated as read-only.
type IsolationNamespaceLister interface {
	// List lists all Isolations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Isolation, err error)
	// Get retrieves the Isolation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Isolation, error)
	IsolationNamespaceListerExpansion
}

// isolationNamespaceLister implements the IsolationNamespaceLister
// interface.
type isolationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Isolations in the indexer for a given namespace.
func (s isolationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Isolation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Isolation))
	})
	return ret, err
}

// Get retrieves the Isolation from the indexer for a given namespace and name.
func (s isolationNamespaceLister) Get(name string) (*v1alpha1.Isolation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("isolation"), name)
	}
	return obj.(*v1alpha1.Isolation), nil
}
