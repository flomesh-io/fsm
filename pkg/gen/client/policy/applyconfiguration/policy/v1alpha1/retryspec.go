/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// RetrySpecApplyConfiguration represents an declarative configuration of the RetrySpec type for use
// with apply.
type RetrySpecApplyConfiguration struct {
	Source       *RetrySrcDstSpecApplyConfiguration  `json:"source,omitempty"`
	Destinations []RetrySrcDstSpecApplyConfiguration `json:"destinations,omitempty"`
	RetryPolicy  *RetryPolicySpecApplyConfiguration  `json:"retryPolicy,omitempty"`
}

// RetrySpecApplyConfiguration constructs an declarative configuration of the RetrySpec type for use with
// apply.
func RetrySpec() *RetrySpecApplyConfiguration {
	return &RetrySpecApplyConfiguration{}
}

// WithSource sets the Source field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Source field is set to the value of the last call.
func (b *RetrySpecApplyConfiguration) WithSource(value *RetrySrcDstSpecApplyConfiguration) *RetrySpecApplyConfiguration {
	b.Source = value
	return b
}

// WithDestinations adds the given value to the Destinations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Destinations field.
func (b *RetrySpecApplyConfiguration) WithDestinations(values ...*RetrySrcDstSpecApplyConfiguration) *RetrySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDestinations")
		}
		b.Destinations = append(b.Destinations, *values[i])
	}
	return b
}

// WithRetryPolicy sets the RetryPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RetryPolicy field is set to the value of the last call.
func (b *RetrySpecApplyConfiguration) WithRetryPolicy(value *RetryPolicySpecApplyConfiguration) *RetrySpecApplyConfiguration {
	b.RetryPolicy = value
	return b
}
