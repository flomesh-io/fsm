/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// RetryPolicySpecApplyConfiguration represents an declarative configuration of the RetryPolicySpec type for use
// with apply.
type RetryPolicySpecApplyConfiguration struct {
	RetryOn                  *string      `json:"retryOn,omitempty"`
	PerTryTimeout            *v1.Duration `json:"perTryTimeout,omitempty"`
	NumRetries               *uint32      `json:"numRetries,omitempty"`
	RetryBackoffBaseInterval *v1.Duration `json:"retryBackoffBaseInterval,omitempty"`
}

// RetryPolicySpecApplyConfiguration constructs an declarative configuration of the RetryPolicySpec type for use with
// apply.
func RetryPolicySpec() *RetryPolicySpecApplyConfiguration {
	return &RetryPolicySpecApplyConfiguration{}
}

// WithRetryOn sets the RetryOn field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RetryOn field is set to the value of the last call.
func (b *RetryPolicySpecApplyConfiguration) WithRetryOn(value string) *RetryPolicySpecApplyConfiguration {
	b.RetryOn = &value
	return b
}

// WithPerTryTimeout sets the PerTryTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PerTryTimeout field is set to the value of the last call.
func (b *RetryPolicySpecApplyConfiguration) WithPerTryTimeout(value v1.Duration) *RetryPolicySpecApplyConfiguration {
	b.PerTryTimeout = &value
	return b
}

// WithNumRetries sets the NumRetries field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NumRetries field is set to the value of the last call.
func (b *RetryPolicySpecApplyConfiguration) WithNumRetries(value uint32) *RetryPolicySpecApplyConfiguration {
	b.NumRetries = &value
	return b
}

// WithRetryBackoffBaseInterval sets the RetryBackoffBaseInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RetryBackoffBaseInterval field is set to the value of the last call.
func (b *RetryPolicySpecApplyConfiguration) WithRetryBackoffBaseInterval(value v1.Duration) *RetryPolicySpecApplyConfiguration {
	b.RetryBackoffBaseInterval = &value
	return b
}
