/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// HTTPConnectionSettingsApplyConfiguration represents an declarative configuration of the HTTPConnectionSettings type for use
// with apply.
type HTTPConnectionSettingsApplyConfiguration struct {
	MaxRequests              *uint32                                `json:"maxRequests,omitempty"`
	MaxRequestsPerConnection *uint32                                `json:"maxRequestsPerConnection,omitempty"`
	MaxPendingRequests       *uint32                                `json:"maxPendingRequests,omitempty"`
	MaxRetries               *uint32                                `json:"maxRetries,omitempty"`
	CircuitBreaking          *HTTPCircuitBreakingApplyConfiguration `json:"circuitBreaking,omitempty"`
}

// HTTPConnectionSettingsApplyConfiguration constructs an declarative configuration of the HTTPConnectionSettings type for use with
// apply.
func HTTPConnectionSettings() *HTTPConnectionSettingsApplyConfiguration {
	return &HTTPConnectionSettingsApplyConfiguration{}
}

// WithMaxRequests sets the MaxRequests field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxRequests field is set to the value of the last call.
func (b *HTTPConnectionSettingsApplyConfiguration) WithMaxRequests(value uint32) *HTTPConnectionSettingsApplyConfiguration {
	b.MaxRequests = &value
	return b
}

// WithMaxRequestsPerConnection sets the MaxRequestsPerConnection field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxRequestsPerConnection field is set to the value of the last call.
func (b *HTTPConnectionSettingsApplyConfiguration) WithMaxRequestsPerConnection(value uint32) *HTTPConnectionSettingsApplyConfiguration {
	b.MaxRequestsPerConnection = &value
	return b
}

// WithMaxPendingRequests sets the MaxPendingRequests field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxPendingRequests field is set to the value of the last call.
func (b *HTTPConnectionSettingsApplyConfiguration) WithMaxPendingRequests(value uint32) *HTTPConnectionSettingsApplyConfiguration {
	b.MaxPendingRequests = &value
	return b
}

// WithMaxRetries sets the MaxRetries field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxRetries field is set to the value of the last call.
func (b *HTTPConnectionSettingsApplyConfiguration) WithMaxRetries(value uint32) *HTTPConnectionSettingsApplyConfiguration {
	b.MaxRetries = &value
	return b
}

// WithCircuitBreaking sets the CircuitBreaking field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CircuitBreaking field is set to the value of the last call.
func (b *HTTPConnectionSettingsApplyConfiguration) WithCircuitBreaking(value *HTTPCircuitBreakingApplyConfiguration) *HTTPConnectionSettingsApplyConfiguration {
	b.CircuitBreaking = value
	return b
}
