/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// HTTPLocalRateLimitSpecApplyConfiguration represents an declarative configuration of the HTTPLocalRateLimitSpec type for use
// with apply.
type HTTPLocalRateLimitSpecApplyConfiguration struct {
	Requests             *uint32                             `json:"requests,omitempty"`
	Unit                 *string                             `json:"unit,omitempty"`
	Burst                *uint32                             `json:"burst,omitempty"`
	ResponseStatusCode   *uint32                             `json:"responseStatusCode,omitempty"`
	ResponseHeadersToAdd []HTTPHeaderValueApplyConfiguration `json:"responseHeadersToAdd,omitempty"`
}

// HTTPLocalRateLimitSpecApplyConfiguration constructs an declarative configuration of the HTTPLocalRateLimitSpec type for use with
// apply.
func HTTPLocalRateLimitSpec() *HTTPLocalRateLimitSpecApplyConfiguration {
	return &HTTPLocalRateLimitSpecApplyConfiguration{}
}

// WithRequests sets the Requests field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Requests field is set to the value of the last call.
func (b *HTTPLocalRateLimitSpecApplyConfiguration) WithRequests(value uint32) *HTTPLocalRateLimitSpecApplyConfiguration {
	b.Requests = &value
	return b
}

// WithUnit sets the Unit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Unit field is set to the value of the last call.
func (b *HTTPLocalRateLimitSpecApplyConfiguration) WithUnit(value string) *HTTPLocalRateLimitSpecApplyConfiguration {
	b.Unit = &value
	return b
}

// WithBurst sets the Burst field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Burst field is set to the value of the last call.
func (b *HTTPLocalRateLimitSpecApplyConfiguration) WithBurst(value uint32) *HTTPLocalRateLimitSpecApplyConfiguration {
	b.Burst = &value
	return b
}

// WithResponseStatusCode sets the ResponseStatusCode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResponseStatusCode field is set to the value of the last call.
func (b *HTTPLocalRateLimitSpecApplyConfiguration) WithResponseStatusCode(value uint32) *HTTPLocalRateLimitSpecApplyConfiguration {
	b.ResponseStatusCode = &value
	return b
}

// WithResponseHeadersToAdd adds the given value to the ResponseHeadersToAdd field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ResponseHeadersToAdd field.
func (b *HTTPLocalRateLimitSpecApplyConfiguration) WithResponseHeadersToAdd(values ...*HTTPHeaderValueApplyConfiguration) *HTTPLocalRateLimitSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithResponseHeadersToAdd")
		}
		b.ResponseHeadersToAdd = append(b.ResponseHeadersToAdd, *values[i])
	}
	return b
}
