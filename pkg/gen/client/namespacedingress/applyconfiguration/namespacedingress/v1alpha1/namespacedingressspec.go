/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// NamespacedIngressSpecApplyConfiguration represents an declarative configuration of the NamespacedIngressSpec type for use
// with apply.
type NamespacedIngressSpecApplyConfiguration struct {
	ServiceType        *v1.ServiceType          `json:"serviceType,omitempty"`
	ServiceAnnotations map[string]string        `json:"serviceAnnotations,omitempty"`
	ServiceLabels      map[string]string        `json:"serviceLabels,omitempty"`
	PodAnnotations     map[string]string        `json:"podAnnotations,omitempty"`
	PodLabels          map[string]string        `json:"podLabels,omitempty"`
	HTTP               *HTTPApplyConfiguration  `json:"http,omitempty"`
	TLS                *TLSApplyConfiguration   `json:"tls,omitempty"`
	Env                []v1.EnvVar              `json:"env,omitempty"`
	Resources          *v1.ResourceRequirements `json:"resources,omitempty"`
	NodeSelector       map[string]string        `json:"nodeSelector,omitempty"`
	ServiceAccountName *string                  `json:"serviceAccountName,omitempty"`
	Affinity           *v1.Affinity             `json:"affinity,omitempty"`
	Tolerations        []v1.Toleration          `json:"tolerations,omitempty"`
	LogLevel           *string                  `json:"logLevel,omitempty"`
	Replicas           *int32                   `json:"replicas,omitempty"`
	SecurityContext    *v1.SecurityContext      `json:"securityContext,omitempty"`
	PodSecurityContext *v1.PodSecurityContext   `json:"podSecurityContext,omitempty"`
}

// NamespacedIngressSpecApplyConfiguration constructs an declarative configuration of the NamespacedIngressSpec type for use with
// apply.
func NamespacedIngressSpec() *NamespacedIngressSpecApplyConfiguration {
	return &NamespacedIngressSpecApplyConfiguration{}
}

// WithServiceType sets the ServiceType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceType field is set to the value of the last call.
func (b *NamespacedIngressSpecApplyConfiguration) WithServiceType(value v1.ServiceType) *NamespacedIngressSpecApplyConfiguration {
	b.ServiceType = &value
	return b
}

// WithServiceAnnotations puts the entries into the ServiceAnnotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ServiceAnnotations field,
// overwriting an existing map entries in ServiceAnnotations field with the same key.
func (b *NamespacedIngressSpecApplyConfiguration) WithServiceAnnotations(entries map[string]string) *NamespacedIngressSpecApplyConfiguration {
	if b.ServiceAnnotations == nil && len(entries) > 0 {
		b.ServiceAnnotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.ServiceAnnotations[k] = v
	}
	return b
}

// WithServiceLabels puts the entries into the ServiceLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ServiceLabels field,
// overwriting an existing map entries in ServiceLabels field with the same key.
func (b *NamespacedIngressSpecApplyConfiguration) WithServiceLabels(entries map[string]string) *NamespacedIngressSpecApplyConfiguration {
	if b.ServiceLabels == nil && len(entries) > 0 {
		b.ServiceLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.ServiceLabels[k] = v
	}
	return b
}

// WithPodAnnotations puts the entries into the PodAnnotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the PodAnnotations field,
// overwriting an existing map entries in PodAnnotations field with the same key.
func (b *NamespacedIngressSpecApplyConfiguration) WithPodAnnotations(entries map[string]string) *NamespacedIngressSpecApplyConfiguration {
	if b.PodAnnotations == nil && len(entries) > 0 {
		b.PodAnnotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.PodAnnotations[k] = v
	}
	return b
}

// WithPodLabels puts the entries into the PodLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the PodLabels field,
// overwriting an existing map entries in PodLabels field with the same key.
func (b *NamespacedIngressSpecApplyConfiguration) WithPodLabels(entries map[string]string) *NamespacedIngressSpecApplyConfiguration {
	if b.PodLabels == nil && len(entries) > 0 {
		b.PodLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.PodLabels[k] = v
	}
	return b
}

// WithHTTP sets the HTTP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HTTP field is set to the value of the last call.
func (b *NamespacedIngressSpecApplyConfiguration) WithHTTP(value *HTTPApplyConfiguration) *NamespacedIngressSpecApplyConfiguration {
	b.HTTP = value
	return b
}

// WithTLS sets the TLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLS field is set to the value of the last call.
func (b *NamespacedIngressSpecApplyConfiguration) WithTLS(value *TLSApplyConfiguration) *NamespacedIngressSpecApplyConfiguration {
	b.TLS = value
	return b
}

// WithEnv adds the given value to the Env field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Env field.
func (b *NamespacedIngressSpecApplyConfiguration) WithEnv(values ...v1.EnvVar) *NamespacedIngressSpecApplyConfiguration {
	for i := range values {
		b.Env = append(b.Env, values[i])
	}
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *NamespacedIngressSpecApplyConfiguration) WithResources(value v1.ResourceRequirements) *NamespacedIngressSpecApplyConfiguration {
	b.Resources = &value
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *NamespacedIngressSpecApplyConfiguration) WithNodeSelector(entries map[string]string) *NamespacedIngressSpecApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithServiceAccountName sets the ServiceAccountName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccountName field is set to the value of the last call.
func (b *NamespacedIngressSpecApplyConfiguration) WithServiceAccountName(value string) *NamespacedIngressSpecApplyConfiguration {
	b.ServiceAccountName = &value
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *NamespacedIngressSpecApplyConfiguration) WithAffinity(value v1.Affinity) *NamespacedIngressSpecApplyConfiguration {
	b.Affinity = &value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *NamespacedIngressSpecApplyConfiguration) WithTolerations(values ...v1.Toleration) *NamespacedIngressSpecApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithLogLevel sets the LogLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogLevel field is set to the value of the last call.
func (b *NamespacedIngressSpecApplyConfiguration) WithLogLevel(value string) *NamespacedIngressSpecApplyConfiguration {
	b.LogLevel = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *NamespacedIngressSpecApplyConfiguration) WithReplicas(value int32) *NamespacedIngressSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithSecurityContext sets the SecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecurityContext field is set to the value of the last call.
func (b *NamespacedIngressSpecApplyConfiguration) WithSecurityContext(value v1.SecurityContext) *NamespacedIngressSpecApplyConfiguration {
	b.SecurityContext = &value
	return b
}

// WithPodSecurityContext sets the PodSecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodSecurityContext field is set to the value of the last call.
func (b *NamespacedIngressSpecApplyConfiguration) WithPodSecurityContext(value v1.PodSecurityContext) *NamespacedIngressSpecApplyConfiguration {
	b.PodSecurityContext = &value
	return b
}
