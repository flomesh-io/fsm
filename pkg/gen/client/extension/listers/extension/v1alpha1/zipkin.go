/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/flomesh-io/fsm/pkg/apis/extension/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZipkinLister helps list Zipkins.
// All objects returned here must be treated as read-only.
type ZipkinLister interface {
	// List lists all Zipkins in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Zipkin, err error)
	// Zipkins returns an object that can list and get Zipkins.
	Zipkins(namespace string) ZipkinNamespaceLister
	ZipkinListerExpansion
}

// zipkinLister implements the ZipkinLister interface.
type zipkinLister struct {
	indexer cache.Indexer
}

// NewZipkinLister returns a new ZipkinLister.
func NewZipkinLister(indexer cache.Indexer) ZipkinLister {
	return &zipkinLister{indexer: indexer}
}

// List lists all Zipkins in the indexer.
func (s *zipkinLister) List(selector labels.Selector) (ret []*v1alpha1.Zipkin, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Zipkin))
	})
	return ret, err
}

// Zipkins returns an object that can list and get Zipkins.
func (s *zipkinLister) Zipkins(namespace string) ZipkinNamespaceLister {
	return zipkinNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZipkinNamespaceLister helps list and get Zipkins.
// All objects returned here must be treated as read-only.
type ZipkinNamespaceLister interface {
	// List lists all Zipkins in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Zipkin, err error)
	// Get retrieves the Zipkin from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Zipkin, error)
	ZipkinNamespaceListerExpansion
}

// zipkinNamespaceLister implements the ZipkinNamespaceLister
// interface.
type zipkinNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Zipkins in the indexer for a given namespace.
func (s zipkinNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Zipkin, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Zipkin))
	})
	return ret, err
}

// Get retrieves the Zipkin from the indexer for a given namespace and name.
func (s zipkinNamespaceLister) Get(name string) (*v1alpha1.Zipkin, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("zipkin"), name)
	}
	return obj.(*v1alpha1.Zipkin), nil
}
