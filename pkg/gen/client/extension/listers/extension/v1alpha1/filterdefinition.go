/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/flomesh-io/fsm/pkg/apis/extension/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FilterDefinitionLister helps list FilterDefinitions.
// All objects returned here must be treated as read-only.
type FilterDefinitionLister interface {
	// List lists all FilterDefinitions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FilterDefinition, err error)
	// FilterDefinitions returns an object that can list and get FilterDefinitions.
	FilterDefinitions(namespace string) FilterDefinitionNamespaceLister
	FilterDefinitionListerExpansion
}

// filterDefinitionLister implements the FilterDefinitionLister interface.
type filterDefinitionLister struct {
	indexer cache.Indexer
}

// NewFilterDefinitionLister returns a new FilterDefinitionLister.
func NewFilterDefinitionLister(indexer cache.Indexer) FilterDefinitionLister {
	return &filterDefinitionLister{indexer: indexer}
}

// List lists all FilterDefinitions in the indexer.
func (s *filterDefinitionLister) List(selector labels.Selector) (ret []*v1alpha1.FilterDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FilterDefinition))
	})
	return ret, err
}

// FilterDefinitions returns an object that can list and get FilterDefinitions.
func (s *filterDefinitionLister) FilterDefinitions(namespace string) FilterDefinitionNamespaceLister {
	return filterDefinitionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FilterDefinitionNamespaceLister helps list and get FilterDefinitions.
// All objects returned here must be treated as read-only.
type FilterDefinitionNamespaceLister interface {
	// List lists all FilterDefinitions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FilterDefinition, err error)
	// Get retrieves the FilterDefinition from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FilterDefinition, error)
	FilterDefinitionNamespaceListerExpansion
}

// filterDefinitionNamespaceLister implements the FilterDefinitionNamespaceLister
// interface.
type filterDefinitionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FilterDefinitions in the indexer for a given namespace.
func (s filterDefinitionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FilterDefinition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FilterDefinition))
	})
	return ret, err
}

// Get retrieves the FilterDefinition from the indexer for a given namespace and name.
func (s filterDefinitionNamespaceLister) Get(name string) (*v1alpha1.FilterDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("filterdefinition"), name)
	}
	return obj.(*v1alpha1.FilterDefinition), nil
}
