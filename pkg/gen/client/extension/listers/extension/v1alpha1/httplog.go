/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/flomesh-io/fsm/pkg/apis/extension/v1alpha1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/listers"
	"k8s.io/client-go/tools/cache"
)

// HTTPLogLister helps list HTTPLogs.
// All objects returned here must be treated as read-only.
type HTTPLogLister interface {
	// List lists all HTTPLogs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HTTPLog, err error)
	// HTTPLogs returns an object that can list and get HTTPLogs.
	HTTPLogs(namespace string) HTTPLogNamespaceLister
	HTTPLogListerExpansion
}

// hTTPLogLister implements the HTTPLogLister interface.
type hTTPLogLister struct {
	listers.ResourceIndexer[*v1alpha1.HTTPLog]
}

// NewHTTPLogLister returns a new HTTPLogLister.
func NewHTTPLogLister(indexer cache.Indexer) HTTPLogLister {
	return &hTTPLogLister{listers.New[*v1alpha1.HTTPLog](indexer, v1alpha1.Resource("httplog"))}
}

// HTTPLogs returns an object that can list and get HTTPLogs.
func (s *hTTPLogLister) HTTPLogs(namespace string) HTTPLogNamespaceLister {
	return hTTPLogNamespaceLister{listers.NewNamespaced[*v1alpha1.HTTPLog](s.ResourceIndexer, namespace)}
}

// HTTPLogNamespaceLister helps list and get HTTPLogs.
// All objects returned here must be treated as read-only.
type HTTPLogNamespaceLister interface {
	// List lists all HTTPLogs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HTTPLog, err error)
	// Get retrieves the HTTPLog from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HTTPLog, error)
	HTTPLogNamespaceListerExpansion
}

// hTTPLogNamespaceLister implements the HTTPLogNamespaceLister
// interface.
type hTTPLogNamespaceLister struct {
	listers.ResourceIndexer[*v1alpha1.HTTPLog]
}
