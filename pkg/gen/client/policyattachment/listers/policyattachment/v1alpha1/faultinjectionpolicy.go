/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/flomesh-io/fsm/pkg/apis/policyattachment/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FaultInjectionPolicyLister helps list FaultInjectionPolicies.
// All objects returned here must be treated as read-only.
type FaultInjectionPolicyLister interface {
	// List lists all FaultInjectionPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FaultInjectionPolicy, err error)
	// FaultInjectionPolicies returns an object that can list and get FaultInjectionPolicies.
	FaultInjectionPolicies(namespace string) FaultInjectionPolicyNamespaceLister
	FaultInjectionPolicyListerExpansion
}

// faultInjectionPolicyLister implements the FaultInjectionPolicyLister interface.
type faultInjectionPolicyLister struct {
	indexer cache.Indexer
}

// NewFaultInjectionPolicyLister returns a new FaultInjectionPolicyLister.
func NewFaultInjectionPolicyLister(indexer cache.Indexer) FaultInjectionPolicyLister {
	return &faultInjectionPolicyLister{indexer: indexer}
}

// List lists all FaultInjectionPolicies in the indexer.
func (s *faultInjectionPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.FaultInjectionPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FaultInjectionPolicy))
	})
	return ret, err
}

// FaultInjectionPolicies returns an object that can list and get FaultInjectionPolicies.
func (s *faultInjectionPolicyLister) FaultInjectionPolicies(namespace string) FaultInjectionPolicyNamespaceLister {
	return faultInjectionPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FaultInjectionPolicyNamespaceLister helps list and get FaultInjectionPolicies.
// All objects returned here must be treated as read-only.
type FaultInjectionPolicyNamespaceLister interface {
	// List lists all FaultInjectionPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FaultInjectionPolicy, err error)
	// Get retrieves the FaultInjectionPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FaultInjectionPolicy, error)
	FaultInjectionPolicyNamespaceListerExpansion
}

// faultInjectionPolicyNamespaceLister implements the FaultInjectionPolicyNamespaceLister
// interface.
type faultInjectionPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FaultInjectionPolicies in the indexer for a given namespace.
func (s faultInjectionPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FaultInjectionPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FaultInjectionPolicy))
	})
	return ret, err
}

// Get retrieves the FaultInjectionPolicy from the indexer for a given namespace and name.
func (s faultInjectionPolicyNamespaceLister) Get(name string) (*v1alpha1.FaultInjectionPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("faultinjectionpolicy"), name)
	}
	return obj.(*v1alpha1.FaultInjectionPolicy), nil
}
