/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/flomesh-io/fsm/pkg/apis/policyattachment/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SessionStickyPolicyLister helps list SessionStickyPolicies.
// All objects returned here must be treated as read-only.
type SessionStickyPolicyLister interface {
	// List lists all SessionStickyPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SessionStickyPolicy, err error)
	// SessionStickyPolicies returns an object that can list and get SessionStickyPolicies.
	SessionStickyPolicies(namespace string) SessionStickyPolicyNamespaceLister
	SessionStickyPolicyListerExpansion
}

// sessionStickyPolicyLister implements the SessionStickyPolicyLister interface.
type sessionStickyPolicyLister struct {
	indexer cache.Indexer
}

// NewSessionStickyPolicyLister returns a new SessionStickyPolicyLister.
func NewSessionStickyPolicyLister(indexer cache.Indexer) SessionStickyPolicyLister {
	return &sessionStickyPolicyLister{indexer: indexer}
}

// List lists all SessionStickyPolicies in the indexer.
func (s *sessionStickyPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.SessionStickyPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SessionStickyPolicy))
	})
	return ret, err
}

// SessionStickyPolicies returns an object that can list and get SessionStickyPolicies.
func (s *sessionStickyPolicyLister) SessionStickyPolicies(namespace string) SessionStickyPolicyNamespaceLister {
	return sessionStickyPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SessionStickyPolicyNamespaceLister helps list and get SessionStickyPolicies.
// All objects returned here must be treated as read-only.
type SessionStickyPolicyNamespaceLister interface {
	// List lists all SessionStickyPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SessionStickyPolicy, err error)
	// Get retrieves the SessionStickyPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SessionStickyPolicy, error)
	SessionStickyPolicyNamespaceListerExpansion
}

// sessionStickyPolicyNamespaceLister implements the SessionStickyPolicyNamespaceLister
// interface.
type sessionStickyPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SessionStickyPolicies in the indexer for a given namespace.
func (s sessionStickyPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SessionStickyPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SessionStickyPolicy))
	})
	return ret, err
}

// Get retrieves the SessionStickyPolicy from the indexer for a given namespace and name.
func (s sessionStickyPolicyNamespaceLister) Get(name string) (*v1alpha1.SessionStickyPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sessionstickypolicy"), name)
	}
	return obj.(*v1alpha1.SessionStickyPolicy), nil
}
