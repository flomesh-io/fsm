/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/flomesh-io/fsm/pkg/apis/policyattachment/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RateLimitPolicyLister helps list RateLimitPolicies.
// All objects returned here must be treated as read-only.
type RateLimitPolicyLister interface {
	// List lists all RateLimitPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RateLimitPolicy, err error)
	// RateLimitPolicies returns an object that can list and get RateLimitPolicies.
	RateLimitPolicies(namespace string) RateLimitPolicyNamespaceLister
	RateLimitPolicyListerExpansion
}

// rateLimitPolicyLister implements the RateLimitPolicyLister interface.
type rateLimitPolicyLister struct {
	indexer cache.Indexer
}

// NewRateLimitPolicyLister returns a new RateLimitPolicyLister.
func NewRateLimitPolicyLister(indexer cache.Indexer) RateLimitPolicyLister {
	return &rateLimitPolicyLister{indexer: indexer}
}

// List lists all RateLimitPolicies in the indexer.
func (s *rateLimitPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.RateLimitPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RateLimitPolicy))
	})
	return ret, err
}

// RateLimitPolicies returns an object that can list and get RateLimitPolicies.
func (s *rateLimitPolicyLister) RateLimitPolicies(namespace string) RateLimitPolicyNamespaceLister {
	return rateLimitPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RateLimitPolicyNamespaceLister helps list and get RateLimitPolicies.
// All objects returned here must be treated as read-only.
type RateLimitPolicyNamespaceLister interface {
	// List lists all RateLimitPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RateLimitPolicy, err error)
	// Get retrieves the RateLimitPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RateLimitPolicy, error)
	RateLimitPolicyNamespaceListerExpansion
}

// rateLimitPolicyNamespaceLister implements the RateLimitPolicyNamespaceLister
// interface.
type rateLimitPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RateLimitPolicies in the indexer for a given namespace.
func (s rateLimitPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RateLimitPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RateLimitPolicy))
	})
	return ret, err
}

// Get retrieves the RateLimitPolicy from the indexer for a given namespace and name.
func (s rateLimitPolicyNamespaceLister) Get(name string) (*v1alpha1.RateLimitPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ratelimitpolicy"), name)
	}
	return obj.(*v1alpha1.RateLimitPolicy), nil
}
