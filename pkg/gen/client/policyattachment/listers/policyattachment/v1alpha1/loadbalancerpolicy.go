/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/flomesh-io/fsm/pkg/apis/policyattachment/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LoadBalancerPolicyLister helps list LoadBalancerPolicies.
// All objects returned here must be treated as read-only.
type LoadBalancerPolicyLister interface {
	// List lists all LoadBalancerPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LoadBalancerPolicy, err error)
	// LoadBalancerPolicies returns an object that can list and get LoadBalancerPolicies.
	LoadBalancerPolicies(namespace string) LoadBalancerPolicyNamespaceLister
	LoadBalancerPolicyListerExpansion
}

// loadBalancerPolicyLister implements the LoadBalancerPolicyLister interface.
type loadBalancerPolicyLister struct {
	indexer cache.Indexer
}

// NewLoadBalancerPolicyLister returns a new LoadBalancerPolicyLister.
func NewLoadBalancerPolicyLister(indexer cache.Indexer) LoadBalancerPolicyLister {
	return &loadBalancerPolicyLister{indexer: indexer}
}

// List lists all LoadBalancerPolicies in the indexer.
func (s *loadBalancerPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.LoadBalancerPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoadBalancerPolicy))
	})
	return ret, err
}

// LoadBalancerPolicies returns an object that can list and get LoadBalancerPolicies.
func (s *loadBalancerPolicyLister) LoadBalancerPolicies(namespace string) LoadBalancerPolicyNamespaceLister {
	return loadBalancerPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LoadBalancerPolicyNamespaceLister helps list and get LoadBalancerPolicies.
// All objects returned here must be treated as read-only.
type LoadBalancerPolicyNamespaceLister interface {
	// List lists all LoadBalancerPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LoadBalancerPolicy, err error)
	// Get retrieves the LoadBalancerPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LoadBalancerPolicy, error)
	LoadBalancerPolicyNamespaceListerExpansion
}

// loadBalancerPolicyNamespaceLister implements the LoadBalancerPolicyNamespaceLister
// interface.
type loadBalancerPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LoadBalancerPolicies in the indexer for a given namespace.
func (s loadBalancerPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LoadBalancerPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoadBalancerPolicy))
	})
	return ret, err
}

// Get retrieves the LoadBalancerPolicy from the indexer for a given namespace and name.
func (s loadBalancerPolicyNamespaceLister) Get(name string) (*v1alpha1.LoadBalancerPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("loadbalancerpolicy"), name)
	}
	return obj.(*v1alpha1.LoadBalancerPolicy), nil
}
