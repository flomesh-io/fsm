/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/flomesh-io/fsm/pkg/apis/policyattachment/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RetryPolicyLister helps list RetryPolicies.
// All objects returned here must be treated as read-only.
type RetryPolicyLister interface {
	// List lists all RetryPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.RetryPolicy, err error)
	// RetryPolicies returns an object that can list and get RetryPolicies.
	RetryPolicies(namespace string) RetryPolicyNamespaceLister
	RetryPolicyListerExpansion
}

// retryPolicyLister implements the RetryPolicyLister interface.
type retryPolicyLister struct {
	indexer cache.Indexer
}

// NewRetryPolicyLister returns a new RetryPolicyLister.
func NewRetryPolicyLister(indexer cache.Indexer) RetryPolicyLister {
	return &retryPolicyLister{indexer: indexer}
}

// List lists all RetryPolicies in the indexer.
func (s *retryPolicyLister) List(selector labels.Selector) (ret []*v1alpha2.RetryPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.RetryPolicy))
	})
	return ret, err
}

// RetryPolicies returns an object that can list and get RetryPolicies.
func (s *retryPolicyLister) RetryPolicies(namespace string) RetryPolicyNamespaceLister {
	return retryPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RetryPolicyNamespaceLister helps list and get RetryPolicies.
// All objects returned here must be treated as read-only.
type RetryPolicyNamespaceLister interface {
	// List lists all RetryPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.RetryPolicy, err error)
	// Get retrieves the RetryPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.RetryPolicy, error)
	RetryPolicyNamespaceListerExpansion
}

// retryPolicyNamespaceLister implements the RetryPolicyNamespaceLister
// interface.
type retryPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RetryPolicies in the indexer for a given namespace.
func (s retryPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.RetryPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.RetryPolicy))
	})
	return ret, err
}

// Get retrieves the RetryPolicy from the indexer for a given namespace and name.
func (s retryPolicyNamespaceLister) Get(name string) (*v1alpha2.RetryPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("retrypolicy"), name)
	}
	return obj.(*v1alpha2.RetryPolicy), nil
}
