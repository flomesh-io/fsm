/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/flomesh-io/fsm/pkg/apis/policyattachment/v1alpha1"
	v1 "sigs.k8s.io/gateway-api/apis/v1"
)

// L7RateLimitApplyConfiguration represents an declarative configuration of the L7RateLimit type for use
// with apply.
type L7RateLimitApplyConfiguration struct {
	Mode                 *v1alpha1.RateLimitPolicyMode `json:"mode,omitempty"`
	Backlog              *int32                        `json:"backlog,omitempty"`
	Requests             *int32                        `json:"requests,omitempty"`
	Burst                *int32                        `json:"burst,omitempty"`
	StatTimeWindow       *int32                        `json:"statTimeWindow,omitempty"`
	ResponseStatusCode   *int32                        `json:"responseStatusCode,omitempty"`
	ResponseHeadersToAdd []v1.HTTPHeader               `json:"responseHeadersToAdd,omitempty"`
}

// L7RateLimitApplyConfiguration constructs an declarative configuration of the L7RateLimit type for use with
// apply.
func L7RateLimit() *L7RateLimitApplyConfiguration {
	return &L7RateLimitApplyConfiguration{}
}

// WithMode sets the Mode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mode field is set to the value of the last call.
func (b *L7RateLimitApplyConfiguration) WithMode(value v1alpha1.RateLimitPolicyMode) *L7RateLimitApplyConfiguration {
	b.Mode = &value
	return b
}

// WithBacklog sets the Backlog field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Backlog field is set to the value of the last call.
func (b *L7RateLimitApplyConfiguration) WithBacklog(value int32) *L7RateLimitApplyConfiguration {
	b.Backlog = &value
	return b
}

// WithRequests sets the Requests field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Requests field is set to the value of the last call.
func (b *L7RateLimitApplyConfiguration) WithRequests(value int32) *L7RateLimitApplyConfiguration {
	b.Requests = &value
	return b
}

// WithBurst sets the Burst field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Burst field is set to the value of the last call.
func (b *L7RateLimitApplyConfiguration) WithBurst(value int32) *L7RateLimitApplyConfiguration {
	b.Burst = &value
	return b
}

// WithStatTimeWindow sets the StatTimeWindow field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StatTimeWindow field is set to the value of the last call.
func (b *L7RateLimitApplyConfiguration) WithStatTimeWindow(value int32) *L7RateLimitApplyConfiguration {
	b.StatTimeWindow = &value
	return b
}

// WithResponseStatusCode sets the ResponseStatusCode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResponseStatusCode field is set to the value of the last call.
func (b *L7RateLimitApplyConfiguration) WithResponseStatusCode(value int32) *L7RateLimitApplyConfiguration {
	b.ResponseStatusCode = &value
	return b
}

// WithResponseHeadersToAdd adds the given value to the ResponseHeadersToAdd field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ResponseHeadersToAdd field.
func (b *L7RateLimitApplyConfiguration) WithResponseHeadersToAdd(values ...v1.HTTPHeader) *L7RateLimitApplyConfiguration {
	for i := range values {
		b.ResponseHeadersToAdd = append(b.ResponseHeadersToAdd, values[i])
	}
	return b
}
