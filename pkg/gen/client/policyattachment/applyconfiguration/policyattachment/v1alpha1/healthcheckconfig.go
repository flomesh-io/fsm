/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// HealthCheckConfigApplyConfiguration represents an declarative configuration of the HealthCheckConfig type for use
// with apply.
type HealthCheckConfigApplyConfiguration struct {
	Interval    *int32                               `json:"interval,omitempty"`
	MaxFails    *int32                               `json:"maxFails,omitempty"`
	FailTimeout *int32                               `json:"failTimeout,omitempty"`
	Path        *string                              `json:"path,omitempty"`
	Matches     []HealthCheckMatchApplyConfiguration `json:"matches,omitempty"`
}

// HealthCheckConfigApplyConfiguration constructs an declarative configuration of the HealthCheckConfig type for use with
// apply.
func HealthCheckConfig() *HealthCheckConfigApplyConfiguration {
	return &HealthCheckConfigApplyConfiguration{}
}

// WithInterval sets the Interval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Interval field is set to the value of the last call.
func (b *HealthCheckConfigApplyConfiguration) WithInterval(value int32) *HealthCheckConfigApplyConfiguration {
	b.Interval = &value
	return b
}

// WithMaxFails sets the MaxFails field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxFails field is set to the value of the last call.
func (b *HealthCheckConfigApplyConfiguration) WithMaxFails(value int32) *HealthCheckConfigApplyConfiguration {
	b.MaxFails = &value
	return b
}

// WithFailTimeout sets the FailTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailTimeout field is set to the value of the last call.
func (b *HealthCheckConfigApplyConfiguration) WithFailTimeout(value int32) *HealthCheckConfigApplyConfiguration {
	b.FailTimeout = &value
	return b
}

// WithPath sets the Path field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Path field is set to the value of the last call.
func (b *HealthCheckConfigApplyConfiguration) WithPath(value string) *HealthCheckConfigApplyConfiguration {
	b.Path = &value
	return b
}

// WithMatches adds the given value to the Matches field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Matches field.
func (b *HealthCheckConfigApplyConfiguration) WithMatches(values ...*HealthCheckMatchApplyConfiguration) *HealthCheckConfigApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMatches")
		}
		b.Matches = append(b.Matches, *values[i])
	}
	return b
}
