/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// VMSpecApplyConfiguration represents an declarative configuration of the VMSpec type for use
// with apply.
type VMSpecApplyConfiguration struct {
	MachineIP          *string                         `json:"machineIP,omitempty"`
	IPFamily           *v1.IPFamily                    `json:"ipFamily,omitempty"`
	ServiceAccountName *string                         `json:"serviceAccountName,omitempty"`
	Services           []ServiceSpecApplyConfiguration `json:"services,omitempty"`
	LivenessProbe      *v1.Probe                       `json:"livenessProbe,omitempty"`
	ReadinessProbe     *v1.Probe                       `json:"readinessProbe,omitempty"`
	StartupProbe       *v1.Probe                       `json:"startupProbe,omitempty"`
}

// VMSpecApplyConfiguration constructs an declarative configuration of the VMSpec type for use with
// apply.
func VMSpec() *VMSpecApplyConfiguration {
	return &VMSpecApplyConfiguration{}
}

// WithMachineIP sets the MachineIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MachineIP field is set to the value of the last call.
func (b *VMSpecApplyConfiguration) WithMachineIP(value string) *VMSpecApplyConfiguration {
	b.MachineIP = &value
	return b
}

// WithIPFamily sets the IPFamily field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPFamily field is set to the value of the last call.
func (b *VMSpecApplyConfiguration) WithIPFamily(value v1.IPFamily) *VMSpecApplyConfiguration {
	b.IPFamily = &value
	return b
}

// WithServiceAccountName sets the ServiceAccountName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccountName field is set to the value of the last call.
func (b *VMSpecApplyConfiguration) WithServiceAccountName(value string) *VMSpecApplyConfiguration {
	b.ServiceAccountName = &value
	return b
}

// WithServices adds the given value to the Services field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Services field.
func (b *VMSpecApplyConfiguration) WithServices(values ...*ServiceSpecApplyConfiguration) *VMSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithServices")
		}
		b.Services = append(b.Services, *values[i])
	}
	return b
}

// WithLivenessProbe sets the LivenessProbe field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LivenessProbe field is set to the value of the last call.
func (b *VMSpecApplyConfiguration) WithLivenessProbe(value v1.Probe) *VMSpecApplyConfiguration {
	b.LivenessProbe = &value
	return b
}

// WithReadinessProbe sets the ReadinessProbe field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadinessProbe field is set to the value of the last call.
func (b *VMSpecApplyConfiguration) WithReadinessProbe(value v1.Probe) *VMSpecApplyConfiguration {
	b.ReadinessProbe = &value
	return b
}

// WithStartupProbe sets the StartupProbe field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartupProbe field is set to the value of the last call.
func (b *VMSpecApplyConfiguration) WithStartupProbe(value v1.Probe) *VMSpecApplyConfiguration {
	b.StartupProbe = &value
	return b
}
