name: Run e2e tests

on:
  workflow_call:
    inputs:
      container_registry:
        required: true
        type: string
      container_tag:
        required: true
        type: string
      os:
        required: true
        type: string
      k8s_version:
        required: true
        type: string
      bucket:
        required: true
        type: string
      focus:
        required: true
        type: string
      images_download_path:
        required: true
        type: string
      fsm_human_debug_log:
        required: false
        type: boolean
        default: true
      k3d_node_logs:
        required: false
        type: boolean
        default: false
      cluster_install_type:
        required: false
        type: string
        default: "K3dCluster"

env:
  CI_WAIT_FOR_OK_SECONDS: 60
  CI_MAX_ITERATIONS_THRESHOLD: 60
  CI_CLIENT_CONCURRENT_CONNECTIONS: 1
  CI_MAX_WAIT_FOR_POD_TIME_SECONDS: 60
  CI_MIN_SUCCESS_THRESHOLD: 1

jobs:
  e2e-test:
    name: e2e
    runs-on: ${{ inputs.os }}
    env:
      CTR_REGISTRY: ${{ inputs.container_registry }}
      CTR_TAG: ${{ inputs.container_tag }}
      FSM_HUMAN_DEBUG_LOG: ${{ inputs.fsm_human_debug_log }}
      CLUSTER_INSTALL_TYPE: ${{ inputs.cluster_install_type }}
      K3D_NODE_LOGS: ${{ inputs.k3d_node_logs }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        if: inputs.os == 'ubuntu-24.04'
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false
          swap-storage: true
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false
      - name: Build test dependencies
        run: make build-fsm
      - name: Add hosts to /etc/hosts
        run: |
          sudo echo "127.0.0.1 httptest.localhost" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 grpctest.localhost" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 tcptest.localhost" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 udptest.localhost" | sudo tee -a /etc/hosts
      - name: Install gRPCurl
        run: |
          go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest
      - name: Download docker image artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: ${{ inputs.images_download_path }}
      - name: Load images
        run: |
          ls -1 ${{ inputs.images_download_path }}/*.tar | xargs --no-run-if-empty -L 1 docker load -i
          docker image ls -a
      - name: Run tests
        id: test
        env:
          K8S_NAMESPACE: "fsm-system"
          LOAD_IMAGES_INTO_CLUSTER: "true"
        run: |
          export PATH=$PWD/bin:$PATH
          echo "PATH=$PATH"
          go test ./tests/e2e -test.v -ginkgo.v -ginkgo.progress -installType=${{ env.CLUSTER_INSTALL_TYPE }} -clusterVersion='${{ inputs.k8s_version }}' -test.timeout 0 -test.failfast -ginkgo.failFast -ginkgo.focus='\[Bucket ${{ inputs.bucket }}\].*${{ inputs.focus }}'
        continue-on-error: true
      - name: Set Logs name
        if: ${{ steps.test.conclusion != 'skipped' }}
        run: |
          if [[ -n "${{ inputs.k8s_version }}" ]]; then
            echo "ARTIFACT_NAME=test_logs_os_${{ inputs.os }}_bucket_${{ inputs.bucket == '.*' && 'any' || inputs.bucket }}_k8s_version_${{ inputs.k8s_version }}" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=test_logs_os_${{ inputs.os }}_bucket_${{ inputs.bucket == '.*' && 'any' || inputs.bucket }}" >> $GITHUB_ENV
          fi
      - name: Upload test logs
        if: ${{ steps.test.conclusion != 'skipped' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /tmp/test**/*
      - name: Check continue tests
        if: ${{ steps.test.conclusion != 'skipped' && steps.test.outcome == 'failure'}}
        run: exit 1
      - name: Clean tests
        if: ${{ steps.test.conclusion != 'skipped' }}
        run: rm -rf /tmp/test*