name: Run e2e tests

on:
  workflow_call:
    inputs:
      os:
        required: false
        type: string
        default: ubuntu-24.04
      k8s_version:
        required: true
        type: string
      bucket:
        required: true
        type: string
      focus:
        required: true
        type: string
      install_grpcurl:
        required: false
        type: boolean
        default: false
      add_hosts:
        required: false
        type: boolean
        default: false
      free_disk_space:
        required: false
        type: boolean
        default: ${{ vars.FREE_DISK_SPACE == 'true' }}
      increase_k3d_cidr_range:
        required: false
        type: boolean
        default: false

env:
  FSM_HUMAN_DEBUG_LOG: ${{ vars.FSM_HUMAN_DEBUG_LOG || 'false' }}
  CLUSTER_INSTALL_TYPE: ${{ vars.CLUSTER_INSTALL_TYPE || 'K3dCluster' }}
  K3D_NODE_LOGS: ${{ vars.K3D_NODE_LOGS || 'false' }}
  FSM_IMAGES_DOWNLOAD_PATH: ${{ vars.FSM_IMAGES_DOWNLOAD_PATH || '/tmp/fsm-images' }}
  FSM_IMAGE_ARTIFACTS_NAME: ${{ vars.FSM_IMAGE_ARTIFACTS_NAME || 'fsm-images' }}
  FSM_CLI_ARTIFACTS_NAME: ${{ vars.FSM_CLI_ARTIFACTS_NAME || 'fsm-cli' }}
  CTR_REGISTRY: ${{ vars.CI_CTR_REGISTRY || 'localhost:5000' }}
  CTR_TAG: ${{ github.sha }}
  LOAD_IMAGES_INTO_CLUSTER: ${{ vars.LOAD_IMAGES_INTO_CLUSTER || 'false' }}

permissions:
  contents: read
  packages: write

jobs:
  e2e-test:
    name: e2e
    runs-on: ${{ inputs.os }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        if: inputs.free_disk_space && startsWith(inputs.os, 'ubuntu')
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false
          swap-storage: true
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false
      - name: Add hosts to /etc/hosts
        if: inputs.add_hosts
        run: |
          sudo echo "127.0.0.1 httptest.localhost" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 grpctest.localhost" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 tcptest.localhost" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 udptest.localhost" | sudo tee -a /etc/hosts
      - name: Install gRPCurl
        if: inputs.install_grpcurl
        run: |
          go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest
      - name: Install k3d CLI
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          k3d version
      - name: Download fsm image artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.FSM_IMAGE_ARTIFACTS_NAME }}
          path: ${{ env.FSM_IMAGES_DOWNLOAD_PATH }}
      - name: Load fsm images
        run: |
          ls -1 ${{ env.FSM_IMAGES_DOWNLOAD_PATH }}/*.tar | xargs --no-run-if-empty -L 1 docker load -i
          docker image ls -a
      - name: Download fsm CLI
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.FSM_CLI_ARTIFACTS_NAME }}
          path: ./bin
      - name: Grant execute permission to fsm CLI
        run: |
          chmod a+x ./bin/fsm
          ls -l ./bin/fsm
      - name: Create k3d managed local registry
        if: ${{ env.LOAD_IMAGES_INTO_CLUSTER != 'true' }}
        run: |
          k3d registry create registry.localhost --port localhost:5000
      - name: Push images to local registry
        if: ${{ env.LOAD_IMAGES_INTO_CLUSTER != 'true' }}
        run: |
          docker image list --format "{{.Repository}}:{{.Tag}}" | grep "^localhost" | xargs --no-run-if-empty -L 1 docker push
      - name: Run tests
        id: test
        env:
          K8S_NAMESPACE: "fsm-system"
          INCREASE_K3D_CIDR_RANGE: ${{ inputs.increase_k3d_cidr_range }}
          NUM_K3D_SERVERS: ${{ vars.NUM_K3D_SERVERS || '1' }}
          NUM_K3D_AGENTS: ${{ vars.NUM_K3D_AGENTS || '1' }}
        run: |
          export PATH=$PWD/bin:$PATH
          echo "PATH=$PATH"
          go test ./tests/e2e -test.v -ginkgo.v -ginkgo.progress -installType=${{ env.CLUSTER_INSTALL_TYPE }} -clusterVersion='${{ inputs.k8s_version }}' -test.timeout 0 -test.failfast -ginkgo.failFast -ginkgo.focus='\[Bucket ${{ inputs.bucket }}\].*${{ inputs.focus }}'
        continue-on-error: true
      - name: Set Logs name
        if: ${{ steps.test.conclusion != 'skipped' }}
        run: |
          if [[ -n "${{ inputs.k8s_version }}" ]]; then
            echo "ARTIFACT_NAME=test_logs_os_${{ inputs.os }}_bucket_${{ inputs.bucket == '.*' && 'any' || inputs.bucket }}_k8s_version_${{ inputs.k8s_version }}" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=test_logs_os_${{ inputs.os }}_bucket_${{ inputs.bucket == '.*' && 'any' || inputs.bucket }}" >> $GITHUB_ENV
          fi
      - name: Upload test logs
        if: ${{ steps.test.conclusion != 'skipped' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /tmp/test**/*
          if-no-files-found: ignore
      - name: Check continue tests
        if: ${{ steps.test.conclusion != 'skipped' && steps.test.outcome == 'failure'}}
        run: exit 1
      - name: Clean tests
        if: ${{ steps.test.conclusion != 'skipped' }}
        run: rm -rf /tmp/test*