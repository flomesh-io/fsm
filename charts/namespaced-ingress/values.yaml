fsm:
  #
  # -- FSM control plane image parameters
  image:
    # -- Container image registry for control plane images
    registry: flomesh
    # -- Container image pull policy for control plane containers
    pullPolicy: IfNotPresent
    # -- Container image tag for control plane images
    tag: "1.3.0"
    # -- Image name defaults
    name:
      # -- fsm-ingress's image name
      fsmIngress: fsm-ingress
      # -- fsm-curl's image name
      fsmCurl: fsm-curl
    # -- Image digest (defaults to latest compatible tag)
    digest:
      # -- fsm-gateway's image digest
      fsmIngress: ""
      # -- fsm-curl's image digest
      fsmCurl: ""

  # -- `fsm-controller` image pull secret
  imagePullSecrets: []

  # -- Identifier for the instance of a service mesh within a cluster
  meshName: fsm

  # -- Namespace to deploy FSM in. If not specified, the Helm release namespace is used.
  fsmNamespace: ""

  fsmIngress:
    className: "pipy"
    logLevel: info
    http:
      enabled: true
      port: 80
      containerPort: 8000
      nodePort: 30508
    tls:
      enabled: false
      port: 443
      containerPort: 8443
      nodePort: 30607
      mTLS: false
      sslPassthrough:
        enabled: false
        upstreamPort: 443
    # -- FSM Pipy Ingress Controller's replica count (ignored when autoscale.enable is true)
    replicaCount: 1
    # -- FSM Pipy Ingress Controller's container resource parameters.
    resources:
      limits:
        cpu: "2"
        memory: "1G"
      requests:
        cpu: "0.5"
        memory: "128M"
    # Extra env variables those will be appended to ingress container
    env:
      - name: GIN_MODE
        value: release
    # -- FSM Pipy Ingress Controller's pod labels
    podLabels: {}
    podAnnotations: {}
    podSecurityContext:
      runAsNonRoot: true
      runAsUser: 65532
      runAsGroup: 65532
      seccompProfile:
        type: RuntimeDefault
      # fsGroup: 2000
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
    #        add:
    #        - NET_BIND_SERVICE

    # -- Node tolerations applied to control plane pods.
    # The specified tolerations allow pods to schedule onto nodes with matching taints.
    tolerations: []

    # -- Node selector applied to control plane pods.
    nodeSelector: {}

    # -- initContainer resource parameters
    initResources:
      limits:
        cpu: "500m"
        memory: "512M"
      requests:
        cpu: "200m"
        memory: "128M"